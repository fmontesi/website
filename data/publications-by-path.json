{"ephemeral-data-handling-in-microservices":{"year":"2019","abstract":"Ephemeral data handling, whereby processed data do not persist, is an emerging requirement of connected IT systems, due to storage constraints (IoT) or regulatory demands (eHealth, GDPR). We present ongoing work on TQuery, a query language for ephemeral data handling in microservices.","collection":{"title":"2019"},"type":"inproceedings","title":"Ephemeral Data Handling in Microservices","path":"ephemeral-data-handling-in-microservices","pdf":"gmsz19","where":"In proceedings of SCC 2019, pp. 234-236","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1109\/SCC.2019.00048"},"id":44,"bibtex":"@inproceedings{DBLP:conf\/IEEEscc\/GiallorenzoMSZ19,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Larisa Safina and\n                  Stefano Pio Zingaro},\n  editor       = {Elisa Bertino and\n                  Carl K. Chang and\n                  Peter Chen and\n                  Ernesto Damiani and\n                  Michael Goul and\n                  Katsunori Oyama},\n  title        = {Ephemeral Data Handling in Microservices},\n  booktitle    = {2019 {IEEE} International Conference on Services Computing, {SCC}\n                  2019, Milan, Italy, July 8-13, 2019},\n  pages        = {234--236},\n  publisher    = {{IEEE}},\n  year         = {2019},\n  url          = {https:\/\/doi.org\/10.1109\/SCC.2019.00048},\n  doi          = {10.1109\/SCC.2019.00048},\n  timestamp    = {Sat, 05 Sep 2020 18:05:54 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/IEEEscc\/GiallorenzoMSZ19.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/IEEEscc\/GiallorenzoMSZ19","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"},{"last":true,"name":"Stefano Pio Zingaro","link":"https:\/\/dblp.uni-trier.de\/pid\/220\/4883"}],"doi":"10.1109\/SCC.2019.00048"},"better-late-than-never-arxiv":{"peerReviewedVersion":"journals\/pacmpl\/KokkeMP19","year":"2018","abstract":"We present Hypersequent Classical Processes (HCP), a revised interpretation\nof the \"Proofs as Processes\" correspondence between linear logic and the\n{\\pi}-calculus initially proposed by Abramsky [1994], and later developed by\nBellin and Scott [1994], Caires and Pfenning [2010], and Wadler [2014], among\nothers. HCP mends the discrepancies between linear logic and the syntax and\nobservable semantics of parallel composition in the {\\pi}-calculus, by\nconservatively extending linear logic to hyperenvironments (collections of\nenvironments, inspired by the hypersequents by Avron [1991]). Separation of\nenvironments in hyperenvironments is internalised by $\\otimes$ and corresponds\nto parallel process behaviour. Thanks to this property, for the first time we\nare able to extract a labelled transition system (lts) semantics from proof\nrewritings. Leveraging the information on parallelism at the level of types, we\nobtain a logical reconstruction of the delayed actions that Merro and Sangiorgi\n[2004] formulated to model non-blocking I\/O in the {\\pi}-calculus. We define a\ndenotational semantics for processes based on Brzozowski derivatives, and\nuncover that non-interference in HCP corresponds to Fubini's theorem of double\nantiderivation. Having an lts allows us to validate HCP using the standard\ntoolbox of behavioural theory. We instantiate bisimilarity and barbed\ncongruence for HCP, and obtain a full abstraction result: bisimilarity,\ndenotational equivalence, and barbed congruence coincide.","collection":{"title":"2018"},"type":"article","title":"Better Late Than Never: A Fully Abstract Semantics for Classical Processes","path":"better-late-than-never-arxiv","where":"In CoRR abs\/1811.02209","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1811.02209"},"id":60,"bibtex":"@article{DBLP:journals\/corr\/abs-1811-02209,\n  author       = {Wen Kokke and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Better Late Than Never: {A} Fully Abstract Semantics for Classical\n                  Processes},\n  journal      = {CoRR},\n  volume       = {abs\/1811.02209},\n  year         = {2018},\n  url          = {http:\/\/arxiv.org\/abs\/1811.02209},\n  eprinttype    = {arXiv},\n  eprint       = {1811.02209},\n  timestamp    = {Sat, 23 Jan 2021 01:12:33 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1811-02209.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1811-02209","authors":[{"last":false,"name":"Wen Kokke","link":"https:\/\/dblp.uni-trier.de\/pid\/206\/7258"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"progress-as-compositional-lock-freedom":{"year":"2014","abstract":"A session-based process satisfies the progress property if its sessions never get stuck when it is executed in an adequate context. Previous work studied how to define progress by introducing the notion of catalysers, execution contexts generated from the type of a process. In this paper, we refine such definition to capture a more intuitive notion of context adequacy for checking progress. Interestingly, our new catalysers lead to a novel characterisation of progress in terms of the standard notion of lock-freedom. Guided by this discovery, we also develop a conservative extension of catalysers that does not depend on types, generalising the notion of progress to untyped session-based processes. We combine our results with existing techniques for lock-freedom, obtaining a new methodology for proving progress. Our methodology captures new processes wrt previous progress analysis based on session types.","collection":{"title":"2014"},"type":"inproceedings","title":"Progress as Compositional Lock-Freedom","path":"progress-as-compositional-lock-freedom","pdf":"cdm14","where":"In proceedings of COORDINATION 2014, pp. 49-64","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q57599640"},"id":97,"bibtex":"@inproceedings{DBLP:conf\/coordination\/CarboneDM14,\n  author       = {Marco Carbone and\n                  Ornela Dardha and\n                  Fabrizio Montesi},\n  editor       = {Eva K{\\\"{u}}hn and\n                  Rosario Pugliese},\n  title        = {Progress as Compositional Lock-Freedom},\n  booktitle    = {Coordination Models and Languages - 16th {IFIP} {WG} 6.1 International\n                  Conference, {COORDINATION} 2014, Held as Part of the 9th International\n                  Federated Conferences on Distributed Computing Techniques, DisCoTec\n                  2014, Berlin, Germany, June 3-5, 2014, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {8459},\n  pages        = {49--64},\n  publisher    = {Springer},\n  year         = {2014},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-662-43376-8\\_4},\n  doi          = {10.1007\/978-3-662-43376-8\\_4},\n  timestamp    = {Tue, 15 Nov 2022 15:22:35 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/coordination\/CarboneDM14.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/coordination\/CarboneDM14","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Ornela Dardha","link":"https:\/\/dblp.uni-trier.de\/pid\/121\/1410"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"taking-linear-logic-apart-arxiv":{"year":"2018","abstract":"Process calculi based on logic, such as $\\pi$DILL and CP, provide a\nfoundation for deadlock-free concurrent programming. However, in previous work,\nthere is a mismatch between the rules for constructing proofs and the term\nconstructors of the $\\pi$-calculus: the fundamental operator for parallel\ncomposition does not correspond to any rule of linear logic. Kokke et al.\n(2019) introduced Hypersequent Classical Processes (HCP), which addresses this\nmismatch using hypersequents (collections of sequents) to register parallelism\nin the typing judgements. However, the step from CP to HCP is a big one. As of\nyet, HCP does not have reduction semantics, and the addition of delayed actions\nmeans that CP processes interpreted as HCP processes do not behave as they\nwould in CP. We introduce HCP-, a variant of HCP with reduction semantics and\nwithout delayed actions. We prove progress, preservation, and termination, and\nshow that HCP- supports the same communication protocols as CP.","collection":{"title":"2018"},"type":"inproceedings","title":"Taking Linear Logic Apart","path":"taking-linear-logic-apart-arxiv","pdf":"kmp18","where":"In proceedings of Linearity-TLLA@FLoC 2018, pp. 90-103","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1904.06848"},"id":54,"bibtex":"@inproceedings{DBLP:journals\/corr\/abs-1904-06848,\n  author       = {Wen Kokke and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  editor       = {Thomas Ehrhard and\n                  Maribel Fern{\\'{a}}ndez and\n                  Valeria de Paiva and\n                  Lorenzo Tortora de Falco},\n  title        = {Taking Linear Logic Apart},\n  booktitle    = {Proceedings Joint International Workshop on Linearity {\\&} Trends\n                  in Linear Logic and Applications, Linearity-TLLA@FLoC 2018, Oxford,\n                  UK, 7-8 July 2018},\n  series       = {{EPTCS}},\n  volume       = {292},\n  pages        = {90--103},\n  year         = {2018},\n  url          = {https:\/\/doi.org\/10.4204\/EPTCS.292.5},\n  doi          = {10.4204\/EPTCS.292.5},\n  timestamp    = {Sat, 19 Oct 2019 19:22:56 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1904-06848.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1904-06848","authors":[{"last":false,"name":"Wen Kokke","link":"https:\/\/dblp.uni-trier.de\/pid\/206\/7258"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"multiparty-classical-choreographies-arxiv":{"peerReviewedVersion":"conf\/lopstr\/CarboneCMM18","year":"2018","abstract":"We present Multiparty Classical Choreographies (MCC), a language model where\nglobal descriptions of communicating systems (choreographies) implement typed\nmultiparty sessions. Typing is achieved by generalising classical linear logic\nto judgements that explicitly record parallelism by means of hypersequents. Our\napproach unifies different lines of work on choreographies and processes with\nmultiparty sessions, as well as their connection to linear logic. Thus, results\ndeveloped in one context are carried over to the others. Key novelties of MCC\ninclude support for server invocation in choreographies, as well as\nlogic-driven compilation of choreographies with replicated processes.","collection":{"title":"2018"},"type":"article","title":"Multiparty Classical Choreographies","path":"multiparty-classical-choreographies-arxiv","where":"In CoRR abs\/1808.05088","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1808.05088"},"id":59,"bibtex":"@article{DBLP:journals\/corr\/abs-1808-05088,\n  author       = {Marco Carbone and\n                  Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Agata Murawska},\n  title        = {Multiparty Classical Choreographies},\n  journal      = {CoRR},\n  volume       = {abs\/1808.05088},\n  year         = {2018},\n  url          = {http:\/\/arxiv.org\/abs\/1808.05088},\n  eprinttype    = {arXiv},\n  eprint       = {1808.05088},\n  timestamp    = {Sun, 02 Sep 2018 15:01:57 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1808-05088.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1808-05088","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Agata Murawska","link":"https:\/\/dblp.uni-trier.de\/pid\/161\/5948"}]},"kickstarting-choreographic-programming":{"year":"2015","abstract":"We present an overview of some recent efforts aimed at the development of Choreographic Programming, a programming paradigm for the production of concurrent software that is guaranteed to be correct by construction from global descriptions of communication behaviour.","collection":{"title":"2015"},"type":"inproceedings","title":"Kickstarting Choreographic Programming","path":"kickstarting-choreographic-programming","pdf":"m15","where":"In proceedings of WS-FM 2015, pp. 3-10","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-33612-1_1"},"id":91,"bibtex":"@inproceedings{DBLP:conf\/wsfm\/Montesi15,\n  author       = {Fabrizio Montesi},\n  editor       = {Thomas T. Hildebrandt and\n                  Ant{\\'{o}}nio Ravara and\n                  Jan Martijn E. M. van der Werf and\n                  Matthias Weidlich},\n  title        = {Kickstarting Choreographic Programming},\n  booktitle    = {Web Services, Formal Methods, and Behavioral Types - 11th International\n                  Workshop, {WS-FM} 2014, Eindhoven, The Netherlands, September 11-12,\n                  2014, and 12th International Workshop, {WS-FM\/BEAT} 2015, Madrid,\n                  Spain, September 4-5, 2015, Revised Selected Papers},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {9421},\n  pages        = {3--10},\n  publisher    = {Springer},\n  year         = {2015},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-33612-1\\_1},\n  doi          = {10.1007\/978-3-319-33612-1\\_1},\n  timestamp    = {Fri, 26 May 2023 07:40:34 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/wsfm\/Montesi15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/wsfm\/Montesi15","authors":{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},"doi":"10.1007\/978-3-319-33612-1_1"},"choreographies-in-practice":{"year":"2016","abstract":"<p>Choreographic Programming is a development methodology for concurrent software that guarantees correctness by construction. The key to this paradigm is to disallow mismatched I\/O operations in programs, called choreographies, and then mechanically synthesise distributed implementations in terms of standard process models via a mechanism known as EndPoint Projection (EPP).<\/p><p>Despite the promise of choreographic programming, there is still a lack of practical evaluations that illustrate the applicability of choreographies to concrete computational problems with standard concurrent solutions. In this work, we explore the potential of choreographies by using Procedural Choreographies (PC), a model that we recently proposed, to write distributed algorithms for sorting (Quicksort), solving linear equations (Gaussian elimination), and computing Fast Fourier Transform. We discuss the lessons learned from this experiment, giving possible directions for the usage and future improvements of choreography languages.<\/p>","collection":{"title":"2016"},"type":"inproceedings","title":"Choreographies in Practice","path":"choreographies-in-practice","pdf":"cm16_forte","where":"In proceedings of FORTE 2016, pp. 114-123","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-39570-8_8"},"id":80,"bibtex":"@inproceedings{DBLP:conf\/forte\/Cruz-FilipeM16,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  editor       = {Elvira Albert and\n                  Ivan Lanese},\n  title        = {Choreographies in Practice},\n  booktitle    = {Formal Techniques for Distributed Objects, Components, and Systems\n                  - 36th {IFIP} {WG} 6.1 International Conference, {FORTE} 2016, Held\n                  as Part of the 11th International Federated Conference on Distributed\n                  Computing Techniques, DisCoTec 2016, Heraklion, Crete, Greece, June\n                  6-9, 2016, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {9688},\n  pages        = {114--123},\n  publisher    = {Springer},\n  year         = {2016},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-39570-8\\_8},\n  doi          = {10.1007\/978-3-319-39570-8\\_8},\n  timestamp    = {Tue, 14 May 2019 10:00:50 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/forte\/Cruz-FilipeM16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/forte\/Cruz-FilipeM16","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-319-39570-8_8"},"formalising-a-turing-complete-choreographic-language-in-coq-arxiv":{"peerReviewedVersion":"conf\/itp\/Cruz-FilipeMP21","year":"2021","abstract":"Theory of choreographic languages typically includes a number of complex\nresults that are proved by structural induction. The high number of cases and\nthe subtle details in some of them lead to long reviewing processes, and\noccasionally to errors being found in published proofs. In this work, we take a\npublished proof of Turing completeness of a choreographic language and\nformalise it in Coq. Our development includes formalising the choreographic\nlanguage and its basic properties, Kleene's theory of partial recursive\nfunctions, the encoding of these functions as choreographies, and proving this\nencoding correct.\n  With this effort, we show that theorem proving can be a very useful tool in\nthe field of choreographic languages: besides the added degree of confidence\nthat we get from a mechanised proof, the formalisation process led us to a\nsignificant simplification of the underlying theory. Our results offer a\nfoundation for the future formal development of choreographic languages.","collection":{"title":"2021"},"type":"article","title":"Formalising a Turing-Complete Choreographic Language in Coq","path":"formalising-a-turing-complete-choreographic-language-in-coq-arxiv","where":"In CoRR abs\/2102.02627","links":{"last":true,"name":"arxiv.org","href":"https:\/\/arxiv.org\/abs\/2102.02627"},"id":33,"bibtex":"@article{DBLP:journals\/corr\/abs-2102-02627,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Formalising a Turing-Complete Choreographic Language in Coq},\n  journal      = {CoRR},\n  volume       = {abs\/2102.02627},\n  year         = {2021},\n  url          = {https:\/\/arxiv.org\/abs\/2102.02627},\n  eprinttype    = {arXiv},\n  eprint       = {2102.02627},\n  timestamp    = {Tue, 09 Feb 2021 13:35:56 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2102-02627.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2102-02627","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"applied-choreographies-arxiv":{"peerReviewedVersion":"conf\/forte\/GiallorenzoMG18","year":"2015","abstract":"Choreographic Programming is a correct-by-construction paradigm where a\ncompilation procedure synthesises deadlock-free, concurrent, and distributed\ncommunicating processes from global, declarative descriptions of\ncommunications, called choreographies. Previous work used choreographies for\nthe synthesis of programs. Alas, there is no formalisation that provides a\nchain of correctness from choreographies to their implementations. This problem\noriginates from the gap between existing theoretical models, which abstract\ncommunications using channel names (\\`a la CCS\/{\\pi}-calculus), and their\nimplementations, which use low-level mechanisms for message routing. As a\nsolution, we propose the theoretical framework of Applied Choreographies. In\nthe framework, developers write choreographies in a language that follows the\nstandard syntax and name-based communication semantics of previous works. Then,\nthey use a compilation procedure to transform a choreography into a low-level,\nimplementation-adherent calculus of Service-Oriented Computing (SOC). To manage\nthe complexity of the compilation, we divide its formalisation and proof in\nthree stages, respectively dealing with: a) the translation of name-based\ncommunications into their SOC equivalents (namely, using correlation mechanisms\nbased on message data); b) the projection of a choreography into a composition\nof partial, single-participant choreographies (towards their translation into\nSOC processes); c) the translation of partial choreographies and the\ndistribution of choreography-level state into SOC processes. We provide results\nof behavioural correspondence for each stage. Thus, given a choreography\nspecification, we guarantee to synthesise its faithful and deadlock-free\nservice-oriented implementation.","collection":{"title":"2015"},"type":"article","title":"Applied Choreographies","path":"applied-choreographies-arxiv","pdf":"ggm15","where":"In CoRR abs\/1510.03637","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1510.03637"},"id":94,"bibtex":"@article{DBLP:journals\/corr\/GabbrielliGM15,\n  author       = {Maurizio Gabbrielli and\n                  Saverio Giallorenzo and\n                  Fabrizio Montesi},\n  title        = {Applied Choreographies},\n  journal      = {CoRR},\n  volume       = {abs\/1510.03637},\n  year         = {2015},\n  url          = {http:\/\/arxiv.org\/abs\/1510.03637},\n  eprinttype    = {arXiv},\n  eprint       = {1510.03637},\n  timestamp    = {Mon, 13 Aug 2018 16:48:53 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/GabbrielliGM15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/GabbrielliGM15","authors":[{"last":false,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"microservices-a-language-based-approach-arxiv":{"peerReviewedVersion":"books\/sp\/17\/GuidiLMM17","year":"2017","abstract":"Microservices is an emerging development paradigm where software is obtained\nby composing autonomous entities, called (micro)services. However, microservice\nsystems are currently developed using general-purpose programming languages\nthat do not provide dedicated abstractions for service composition. Instead,\ncurrent practice is focused on the deployment aspects of microservices, in\nparticular by using containerization. In this chapter, we make the case for a\nlanguage-based approach to the engineering of microservice architectures, which\nwe believe is complementary to current practice. We discuss the approach in\ngeneral, and then we instantiate it in terms of the Jolie programming language.","collection":{"title":"2017"},"type":"article","title":"Microservices: a Language-based Approach","path":"microservices-a-language-based-approach-arxiv","where":"In CoRR abs\/1704.08073","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1704.08073"},"id":70,"bibtex":"@article{DBLP:journals\/corr\/GuidiLMM17,\n  author       = {Claudio Guidi and\n                  Ivan Lanese and\n                  Manuel Mazzara and\n                  Fabrizio Montesi},\n  title        = {Microservices: a Language-based Approach},\n  journal      = {CoRR},\n  volume       = {abs\/1704.08073},\n  year         = {2017},\n  url          = {http:\/\/arxiv.org\/abs\/1704.08073},\n  eprinttype    = {arXiv},\n  eprint       = {1704.08073},\n  timestamp    = {Mon, 13 Aug 2018 16:49:15 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/GuidiLMM17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/GuidiLMM17","authors":[{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"circuit-breakers-discovery-and-api-gateways-in-microservices-arxiv":{"year":"2016","abstract":"We review some of the most widely used patterns for the programming of\nmicroservices: circuit breaker, service discovery, and API gateway. By\nsystematically analysing different deployment strategies for these patterns, we\nreach new insight especially for the application of circuit breakers. We also\nevaluate the applicability of Jolie, a language for the programming of\nmicroservices, for these patterns and report on other standard frameworks\noffering similar solutions. Finally, considerations for future developments are\npresented.","collection":{"title":"2016"},"type":"article","title":"Circuit Breakers, Discovery, and API Gateways in Microservices","path":"circuit-breakers-discovery-and-api-gateways-in-microservices-arxiv","pdf":"mw16","where":"In CoRR abs\/1609.05830","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1609.05830"},"id":85,"bibtex":"@article{DBLP:journals\/corr\/MontesiW16,\n  author       = {Fabrizio Montesi and\n                  Janine Weber},\n  title        = {Circuit Breakers, Discovery, and {API} Gateways in Microservices},\n  journal      = {CoRR},\n  volume       = {abs\/1609.05830},\n  year         = {2016},\n  url          = {http:\/\/arxiv.org\/abs\/1609.05830},\n  eprinttype    = {arXiv},\n  eprint       = {1609.05830},\n  timestamp    = {Mon, 13 Aug 2018 16:46:02 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/MontesiW16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/MontesiW16","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Janine Weber","link":"https:\/\/dblp.uni-trier.de\/pid\/186\/7899"}]},"the-evolution-of-jolie":{"year":"2015","abstract":"Jolie is an orchestration language conceived during Sensoria, an FP7 European project led by Martin Wirsing in the time frame 2005\u20132010. Jolie was designed having in mind both the novel \u2013at project time\u2013 concepts related to Service-Oriented Computing and the traditional approach to the modelling of concurrency typical of process calculi. The foundational work done around Jolie during Sensoria has subsequently produced many concrete results. In this paper we focus on two distinct advancements, one aiming at the development of dynamically adaptable orchestrated systems and one focusing on global choreographic specifications. These works, more recently, contributed to the realisation of a framework for programming dynamically evolvable distributed ServiceOriented applications that are correct-by-construction.","collection":{"title":"2015"},"type":"inproceedings","title":"The Evolution of Jolie - From Orchestrations to Adaptable Choreographies","path":"the-evolution-of-jolie","pdf":"lmz15","where":"In proceedings of Software, Services, and Systems 2015, pp. 506-521","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-15545-6_29"},"id":89,"bibtex":"@inproceedings{DBLP:conf\/birthday\/LaneseMZ15,\n  author       = {Ivan Lanese and\n                  Fabrizio Montesi and\n                  Gianluigi Zavattaro},\n  editor       = {Rocco De Nicola and\n                  Rolf Hennicker},\n  title        = {The Evolution of Jolie - From Orchestrations to Adaptable Choreographies},\n  booktitle    = {Software, Services, and Systems - Essays Dedicated to Martin Wirsing\n                  on the Occasion of His Retirement from the Chair of Programming and\n                  Software Engineering},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {8950},\n  pages        = {506--521},\n  publisher    = {Springer},\n  year         = {2015},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-15545-6\\_29},\n  doi          = {10.1007\/978-3-319-15545-6\\_29},\n  timestamp    = {Tue, 14 May 2019 10:00:52 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/birthday\/LaneseMZ15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/birthday\/LaneseMZ15","authors":[{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}],"doi":"10.1007\/978-3-319-15545-6_29"},"choreographies-divided-and-conquered-arxiv":{"peerReviewedVersion":"conf\/forte\/Cruz-FilipeM17","year":"2016","abstract":"A recent study of bugs in real-world concurrent and distributed systems found\nthat, while implementations of individual protocols tend to be robust, the\ncomposition of multiple protocols and its interplay with internal computation\nis the culprit for most errors. Multiparty Session Types and Choreographic\nProgramming are methodologies for developing correct-by-construction concurrent\nand distributed software, based on global descriptions of communication flows.\nHowever, protocol composition is either limited or left unchecked. Inspired by\nthese two methodologies, in this work we present a new language model for the\nsafe composition of protocols, called Procedural Choreographies (PC). Protocols\nin PC are procedures, parameterised on the processes that enact them.\nProcedures define communications declaratively using global descriptions, and\nprograms are written by invoking and composing these procedures. An\nimplementation in terms of a process model is then mechanically synthesised,\nguaranteeing correctness and deadlock-freedom. We study PC in the settings of\nsynchronous and asynchronous communications, and illustrate its expressivity\nwith some representative examples.","collection":{"title":"2016"},"type":"article","title":"Choreographies, Divided and Conquered","path":"choreographies-divided-and-conquered-arxiv","where":"In CoRR abs\/1602.03729","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1602.03729"},"id":81,"bibtex":"@article{DBLP:journals\/corr\/Cruz-FilipeM16,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  title        = {Choreographies, Divided and Conquered},\n  journal      = {CoRR},\n  volume       = {abs\/1602.03729},\n  year         = {2016},\n  url          = {http:\/\/arxiv.org\/abs\/1602.03729},\n  eprinttype    = {arXiv},\n  eprint       = {1602.03729},\n  timestamp    = {Mon, 13 Aug 2018 16:48:45 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/Cruz-FilipeM16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/Cruz-FilipeM16","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"data-driven-workflows-for-microservices":{"year":"2016","abstract":"Microservices is an architectural style inspired by service-oriented computing that has recently started gaining popularity. Jolie is a programming language based on the microservices paradigm: the main building block of Jolie systems are services, in contrast to, e.g., functions or objects. The primitives offered by the Jolie language elicit many of the recurring patterns found in microservices, like load balancers and structured processes. However, Jolie still lacks some useful constructs for dealing with message types and data manipulation that are present in service-oriented computing. In this paper, we focus on the possibility of expressing choices at the level of data types, a feature well represented in standards for Web Services, e.g., WSDL. We extend Jolie to support such type choices, and enable Jolie processes to act on data generically (without knowing which type it has in the choice). We show the impact of our implementation on some of the typical scenarios found in microservice systems. This shows how computation can move from a process-driven to a data-driven approach, and leads to the preliminary identification of recurring communication patterns that can be shaped as design patterns.","collection":{"title":"2016"},"title":"Data-Driven Workflows for Microservices: Genericity in Jolie","type":"inproceedings","path":"data-driven-workflows-for-microservices","where":"In proceedings of AINA 2016, pp. 430-437","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q59255465"},"id":76,"bibtex":"@inproceedings{DBLP:conf\/aina\/SafinaMMR16,\n  author       = {Larisa Safina and\n                  Manuel Mazzara and\n                  Fabrizio Montesi and\n                  Victor Rivera},\n  editor       = {Leonard Barolli and\n                  Makoto Takizawa and\n                  Tomoya Enokido and\n                  Antonio J. Jara and\n                  Yann Bocchi},\n  title        = {Data-Driven Workflows for Microservices: Genericity in Jolie},\n  booktitle    = {30th {IEEE} International Conference on Advanced Information Networking\n                  and Applications, {AINA} 2016, Crans-Montana, Switzerland, 23-25 March,\n                  2016},\n  pages        = {430--437},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2016},\n  url          = {https:\/\/doi.org\/10.1109\/AINA.2016.95},\n  doi          = {10.1109\/AINA.2016.95},\n  timestamp    = {Fri, 24 Mar 2023 00:03:54 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/aina\/SafinaMMR16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/aina\/SafinaMMR16","authors":[{"last":false,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Victor Rivera","link":"https:\/\/dblp.uni-trier.de\/pid\/40\/11498"}]},"service-oriented-programming-with-jolie":{"year":"2014","abstract":"<p>The wide adoption of service-oriented computing has led to a heterogeneous scenario formed by different technologies and specifications. Examples can be found both at the design level \u2014 the frameworks for defining services and those for defining their coordination feature fundamentally different primitives \u2014 and at the implementation level \u2014 different communication technologies are used depending on the context.<\/p><p>In this chapter we present Jolie, a fully-fledged service-oriented programming language. Jolie addresses the aforementioned heterogeneity in two ways. On the one hand, it combines computation and composition primitives in an intuitive and concise syntax. On the other hand, the behaviour and deployment of a Jolie program are orthogonal: they can be independently defined and recombined as long as they have compatible typing.<\/p>","collection":{"title":"2014"},"type":"incollection","title":"Service-Oriented Programming with Jolie","path":"service-oriented-programming-with-jolie","pdf":"mgz14","where":"Book chapter in Web Services Foundations, pp. 81-107","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q59702047"},"id":99,"bibtex":"@incollection{DBLP:books\/sp\/wsf14\/MontesiGZ14,\n  author       = {Fabrizio Montesi and\n                  Claudio Guidi and\n                  Gianluigi Zavattaro},\n  editor       = {Athman Bouguettaya and\n                  Quan Z. Sheng and\n                  Florian Daniel},\n  title        = {Service-Oriented Programming with Jolie},\n  booktitle    = {Web Services Foundations},\n  pages        = {81--107},\n  publisher    = {Springer},\n  year         = {2014},\n  url          = {https:\/\/doi.org\/10.1007\/978-1-4614-7518-7\\_4},\n  doi          = {10.1007\/978-1-4614-7518-7\\_4},\n  timestamp    = {Sat, 19 Oct 2019 19:02:56 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/books\/sp\/wsf14\/MontesiGZ14.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"books\/sp\/wsf14\/MontesiGZ14","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}]},"behavioral-types-in-programming-languages":{"year":"2016","abstract":"A recent trend in programming language research is to use behavioral type theory to ensure various correctness properties of largescale, communication-intensive systems. Behavioral types encompass concepts such as interfaces, communication protocols, contracts, and choreography. The successful application of behavioral types requires a solid understanding of several practical aspects, from their representation in a concrete programming language, to their integration with other programming constructs such as methods and functions, to design and monitoring methodologies that take behaviors into account. This survey provides an overview of the state of the art of these aspects, which we summarize as the pragmatics of behavioral types.","collection":{"title":"2016"},"type":"article","title":"Behavioral Types in Programming Languages","path":"behavioral-types-in-programming-languages","pdf":"btipl","where":"In Found. Trends Program. Lang. 3","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1561\/2500000031"},"id":74,"bibtex":"@article{DBLP:journals\/ftpl\/AnconaBB0CDGGGH16,\n  author       = {Davide Ancona and\n                  Viviana Bono and\n                  Mario Bravetti and\n                  Joana Campos and\n                  Giuseppe Castagna and\n                  Pierre{-}Malo Deni{\\'{e}}lou and\n                  Simon J. Gay and\n                  Nils Gesbert and\n                  Elena Giachino and\n                  Raymond Hu and\n                  Einar Broch Johnsen and\n                  Francisco Martins and\n                  Viviana Mascardi and\n                  Fabrizio Montesi and\n                  Rumyana Neykova and\n                  Nicholas Ng and\n                  Luca Padovani and\n                  Vasco T. Vasconcelos and\n                  Nobuko Yoshida},\n  title        = {Behavioral Types in Programming Languages},\n  journal      = {Found. Trends Program. Lang.},\n  volume       = {3},\n  number       = {2-3},\n  pages        = {95--230},\n  year         = {2016},\n  url          = {https:\/\/doi.org\/10.1561\/2500000031},\n  doi          = {10.1561\/2500000031},\n  timestamp    = {Tue, 21 Mar 2023 21:16:07 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/ftpl\/AnconaBB0CDGGGH16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/ftpl\/AnconaBB0CDGGGH16","authors":[{"last":false,"name":"Davide Ancona","link":"https:\/\/dblp.uni-trier.de\/pid\/a\/DAncona"},{"last":false,"name":"Viviana Bono","link":"https:\/\/dblp.uni-trier.de\/pid\/27\/3453"},{"last":false,"name":"Mario Bravetti","link":"https:\/\/dblp.uni-trier.de\/pid\/08\/5320"},{"last":false,"name":"Joana Campos 0002","link":"https:\/\/dblp.uni-trier.de\/pid\/36\/8434-2"},{"last":false,"name":"Giuseppe Castagna","link":"https:\/\/dblp.uni-trier.de\/pid\/c\/GiuseppeCastagna"},{"last":false,"name":"Pierre-Malo Deniélou","link":"https:\/\/dblp.uni-trier.de\/pid\/86\/6627"},{"last":false,"name":"Simon J. Gay","link":"https:\/\/dblp.uni-trier.de\/pid\/30\/4430"},{"last":false,"name":"Nils Gesbert","link":"https:\/\/dblp.uni-trier.de\/pid\/98\/3900"},{"last":false,"name":"Elena Giachino","link":"https:\/\/dblp.uni-trier.de\/pid\/16\/1532"},{"last":false,"name":"Raymond Hu","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/3214"},{"last":false,"name":"Einar Broch Johnsen","link":"https:\/\/dblp.uni-trier.de\/pid\/j\/EinarBrochJohnsen"},{"last":false,"name":"Francisco Martins","link":"https:\/\/dblp.uni-trier.de\/pid\/12\/2993"},{"last":false,"name":"Viviana Mascardi","link":"https:\/\/dblp.uni-trier.de\/pid\/m\/VMascardi"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Rumyana Neykova","link":"https:\/\/dblp.uni-trier.de\/pid\/134\/9526"},{"last":false,"name":"Nicholas Ng","link":"https:\/\/dblp.uni-trier.de\/pid\/44\/9716"},{"last":false,"name":"Luca Padovani","link":"https:\/\/dblp.uni-trier.de\/pid\/22\/6590"},{"last":false,"name":"Vasco T. Vasconcelos","link":"https:\/\/dblp.uni-trier.de\/pid\/97\/1086"},{"last":true,"name":"Nobuko Yoshida","link":"https:\/\/dblp.uni-trier.de\/pid\/29\/3650"}],"doi":"10.1561\/2500000031"},"choreographies-logically":{"year":"2014","abstract":"In Choreographic Programming, a distributed system is programmed by giving a choreography, a global description of its interactions, instead of separately specifying the behaviour of each of its processes. Process implementations in terms of a distributed language can then be automatically projected from a choreography. We present Linear Compositional Choreographies (LCC), a proof theory for reasoning about programs that modularly combine choreographies with processes. Using LCC, we logically reconstruct a semantics and a projection procedure for programs. For the first time, we also obtain a procedure for extracting choreographies from process terms.","collection":{"title":"2014"},"type":"inproceedings","title":"Choreographies, Logically","path":"choreographies-logically","pdf":"cms14","where":"In proceedings of CONCUR 2014, pp. 47-62","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-662-44584-6_5"},"id":96,"bibtex":"@inproceedings{DBLP:conf\/concur\/CarboneMS14,\n  author       = {Marco Carbone and\n                  Fabrizio Montesi and\n                  Carsten Sch{\\\"{u}}rmann},\n  editor       = {Paolo Baldan and\n                  Daniele Gorla},\n  title        = {Choreographies, Logically},\n  booktitle    = {{CONCUR} 2014 - Concurrency Theory - 25th International Conference,\n                  {CONCUR} 2014, Rome, Italy, September 2-5, 2014. Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {8704},\n  pages        = {47--62},\n  publisher    = {Springer},\n  year         = {2014},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-662-44584-6\\_5},\n  doi          = {10.1007\/978-3-662-44584-6\\_5},\n  timestamp    = {Tue, 14 May 2019 10:00:43 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/concur\/CarboneMS14.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/concur\/CarboneMS14","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Carsten Schürmann","link":"https:\/\/dblp.uni-trier.de\/pid\/07\/4034"}],"doi":"10.1007\/978-3-662-44584-6_5"},"jolie-msc":{"notes":{"text":"<award>Best M.Sc. thesis on ICT (General Confederation of Italian Industry)<\/award>"},"year":"2010","abstract":"The original MSc thesis in Computer Science on the Jolie programming language.","collection":{"title":"Highlights"},"title":"JOLIE: a Service-oriented Programming Language","type":"msc","path":"jolie-msc","pdf":"m10","where":"MSc Thesis, University of Bologna","links":{"last":true,"name":"Wikipedia","href":"https:\/\/en.wikipedia.org\/wiki\/Jolie_(programming_language)"},"id":3,"bibtex":"@MastersThesis{M10,\r\n author = \"Fabrizio Montesi\",\r\n title = \"{J}{O}{L}{I}{E}: a {S}ervice-oriented {P}rogramming {L}anguage\",\r\n school = \"University of Bologna\",\r\n year = {2010},\r\n url = {\\url{https:\/\/www.fabriziomontesi.com\/files\/m10.pdf}}\r\n}","key":"M10","authors":{"last":true,"name":"Fabrizio Montesi"}},"microservice-security":{"year":"2022","abstract":"Microservices is an emerging paradigm for developing distributed systems. With their widespread adoption, more and more work investigated the relation between microservices and security. Alas, the literature on this subject does not form a well-defined corpus: it is spread over many venues and composed of contributions mainly addressing specific scenarios or needs. In this work, we conduct a systematic review of the field, gathering 290 relevant publications\u2014at the time of writing, the largest curated dataset on the topic. We analyse our dataset along two lines: (a) quantitatively, through publication metadata, which allows us to chart publication outlets, communities, approaches, and tackled issues; (b) qualitatively, through 20 research questions used to provide an aggregated overview of the literature and to spot gaps left open. We summarise our analyses in the conclusion in the form of a call for action to address the main open challenges.","collection":{"title":"2022"},"type":"article","title":"Microservice security: a systematic literature review","path":"microservice-security","pdf":"bgmmmp22","where":"In PeerJ Comput. Sci. 8","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q110949567"},"id":19,"bibtex":"@article{DBLP:journals\/peerj-cs\/BerardiGMMMP22,\n  author       = {Davide Berardi and\n                  Saverio Giallorenzo and\n                  Jacopo Mauro and\n                  Andrea Melis and\n                  Fabrizio Montesi and\n                  Marco Prandini},\n  title        = {Microservice security: a systematic literature review},\n  journal      = {PeerJ Comput. Sci.},\n  volume       = {8},\n  pages        = {e779},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.7717\/peerj-cs.779},\n  doi          = {10.7717\/peerj-cs.779},\n  timestamp    = {Sat, 09 Apr 2022 12:23:40 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/peerj-cs\/BerardiGMMMP22.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/peerj-cs\/BerardiGMMMP22","authors":[{"last":false,"name":"Davide Berardi","link":"https:\/\/dblp.uni-trier.de\/pid\/233\/5692"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Jacopo Mauro","link":"https:\/\/dblp.uni-trier.de\/pid\/53\/1605"},{"last":false,"name":"Andrea Melis 0001","link":"https:\/\/dblp.uni-trier.de\/pid\/184\/7813"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Prandini","link":"https:\/\/dblp.uni-trier.de\/pid\/53\/4448"}]},"refinement-types-in-jolie-arxiv":{"year":"2016","abstract":"Jolie is the first language for microservices and it is currently dynamically\ntype checked. This paper considers the opportunity to integrate dynamic and\nstatic type checking with the introduction of refinement types, verified via\nSMT solver. The integration of the two aspects allows a scenario where the\nstatic verification of internal services and the dynamic verification of\n(potentially malicious) external services cooperates in order to reduce testing\neffort and enhancing security.","collection":{"title":"2016"},"type":"article","title":"Refinement types in Jolie","path":"refinement-types-in-jolie-arxiv","pdf":"tsmem16","where":"In CoRR abs\/1602.06823","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1602.06823"},"id":82,"bibtex":"@article{DBLP:journals\/corr\/TchitchiginSMEM16,\n  author       = {Alexander Tchitchigin and\n                  Larisa Safina and\n                  Manuel Mazzara and\n                  Mohamed Elwakil and\n                  Fabrizio Montesi and\n                  Victor Rivera},\n  title        = {Refinement types in Jolie},\n  journal      = {CoRR},\n  volume       = {abs\/1602.06823},\n  year         = {2016},\n  url          = {http:\/\/arxiv.org\/abs\/1602.06823},\n  eprinttype    = {arXiv},\n  eprint       = {1602.06823},\n  timestamp    = {Mon, 17 Sep 2018 07:34:47 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/TchitchiginSMEM16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/TchitchiginSMEM16","authors":[{"last":false,"name":"Alexander Tchitchigin","link":"https:\/\/dblp.uni-trier.de\/pid\/176\/5140"},{"last":false,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":false,"name":"Mohamed Elwakil","link":"https:\/\/dblp.uni-trier.de\/pid\/83\/8556"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Victor Rivera","link":"https:\/\/dblp.uni-trier.de\/pid\/40\/11498"}]},"certifying-choreography-compilation-arxiv":{"peerReviewedVersion":"conf\/ictac\/Cruz-FilipeMP21","year":"2021","abstract":"Choreographic programming is a paradigm for developing concurrent and\ndistributed systems, where programs are choreographies that define, from a\nglobal viewpoint, the computations and interactions that communicating\nprocesses should enact. Choreography compilation translates choreographies into\nthe local definitions of process behaviours, given as terms in a process\ncalculus.\n  Proving choreography compilation correct is challenging and error-prone,\nbecause it requires relating languages in different paradigms (global\ninteractions vs local actions) and dealing with a combinatorial explosion of\nproof cases. We present the first certified program for choreography\ncompilation for a nontrivial choreographic language supporting recursion.","collection":{"title":"2021"},"type":"article","title":"Certifying Choreography Compilation","path":"certifying-choreography-compilation-arxiv","where":"In CoRR abs\/2102.10698","links":{"last":true,"name":"arxiv.org","href":"https:\/\/arxiv.org\/abs\/2102.10698"},"id":34,"bibtex":"@article{DBLP:journals\/corr\/abs-2102-10698,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Certifying Choreography Compilation},\n  journal      = {CoRR},\n  volume       = {abs\/2102.10698},\n  year         = {2021},\n  url          = {https:\/\/arxiv.org\/abs\/2102.10698},\n  eprinttype    = {arXiv},\n  eprint       = {2102.10698},\n  timestamp    = {Wed, 24 Feb 2021 15:42:45 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2102-10698.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2102-10698","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"special-issue-on-service-oriented-architecture-and-programming-soap-2013":{"year":"2015","abstract":"Special issue on Service-Oriented Architecture and Programming (SOAP 2013).","collection":{"title":"2015"},"title":"Special issue on Service-Oriented Architecture and Programming (SOAP 2013)","type":"article","path":"special-issue-on-service-oriented-architecture-and-programming-soap-2013","where":"In Sci. Comput. Program. 97","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q59255508"},"id":88,"bibtex":"@article{DBLP:journals\/scp\/LaneseMM15,\n  author       = {Ivan Lanese and\n                  Manuel Mazzara and\n                  Fabrizio Montesi},\n  title        = {Special issue on Service-Oriented Architecture and Programming {(SOAP}\n                  2013)},\n  journal      = {Sci. Comput. Program.},\n  volume       = {97},\n  pages        = {181--182},\n  year         = {2015},\n  url          = {https:\/\/doi.org\/10.1016\/j.scico.2014.07.007},\n  doi          = {10.1016\/j.scico.2014.07.007},\n  timestamp    = {Wed, 17 Feb 2021 21:56:08 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/scp\/LaneseMM15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/scp\/LaneseMM15","authors":[{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"formalising-a-turing-complete-choreographic-language-in-coq":{"year":"2021","abstract":"<p>The theory of choreographic languages typically includes a number of complex results that are proved by structural induction. The high number of cases and the subtle details in some of them lead to long reviewing processes, and occasionally to errors being found in published proofs. In this work, we take a published proof of Turing completeness of a choreographic language and formalise it in Coq. Our development includes formalising the choreographic language, its basic properties, Kleene\u2019s theory of partial recursive functions, the encoding of these functions as choreographies, and a proof that this encoding is correct.<\/p><p>With this effort, we show that theorem proving can be a very useful tool in the field of choreographic languages: besides the added degree of confidence that we get from a mechanised proof, the formalisation process led us to a significant simplification of the underlying theory. Our results offer a foundation for the future formal development of choreographic languages.<\/p>","collection":{"title":"2021"},"type":"inproceedings","title":"Formalising a Turing-Complete Choreographic Language in Coq","path":"formalising-a-turing-complete-choreographic-language-in-coq","pdf":"cmp21","where":"In proceedings of ITP 2021, pp. 15:1-15:18","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.4230\/LIPIcs.ITP.2021.15"},"id":32,"bibtex":"@inproceedings{DBLP:conf\/itp\/Cruz-FilipeMP21,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  editor       = {Liron Cohen and\n                  Cezary Kaliszyk},\n  title        = {Formalising a Turing-Complete Choreographic Language in Coq},\n  booktitle    = {12th International Conference on Interactive Theorem Proving, {ITP}\n                  2021, June 29 to July 1, 2021, Rome, Italy (Virtual Conference)},\n  series       = {LIPIcs},\n  volume       = {193},\n  pages        = {15:1--15:18},\n  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\n  year         = {2021},\n  url          = {https:\/\/doi.org\/10.4230\/LIPIcs.ITP.2021.15},\n  doi          = {10.4230\/LIPIcs.ITP.2021.15},\n  timestamp    = {Thu, 14 Oct 2021 10:27:52 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/itp\/Cruz-FilipeMP21.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/itp\/Cruz-FilipeMP21","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.4230\/LIPIcs.ITP.2021.15"},"alice-or-bob-arxiv":{"year":"2023","abstract":"We present PolyChor$\\lambda$, a language for higher-order functional\n\\emph{choreographic programming} -- an emerging paradigm by which programmers\nwrite the desired cooperative behaviour of a system of communicating processes\nand then compile it into distributed implementations for each process, a\ntranslation called \\emph{endpoint projection}. Unlike its predecessor,\nChor$\\lambda$, PolyChor$\\lambda$ has both type and \\emph{process} polymorphism\ninspired by System F$_\\omega$. That is, PolyChor$\\lambda$ is the first\n(higher-order) functional choreographic language which gives programmers the\nability to write generic choreographies and determine the participants at\nruntime. This novel combination of features also allows PolyChor$\\lambda$\nprocesses to communicate \\emph{distributed values}, leading to a new and\nintuitive way to write delegation. While some of the functional features of\nPolyChor$\\lambda$ give it a weaker correspondence between the semantics of\nchoreographies and their endpoint-projected concurrent systems than some other\nchoreographic languages, we still get the hallmark end result of choreographic\nprogramming: projected programs are deadlock-free by design.","collection":{"title":"2023"},"type":"article","title":"Alice or Bob?: Process Polymorphism in Choreographies","path":"alice-or-bob-arxiv","where":"In CoRR abs\/2303.04678","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.48550\/arXiv.2303.04678"},"id":16,"bibtex":"@article{DBLP:journals\/corr\/abs-2303-04678,\n  author       = {Eva Graversen and\n                  Andrew K. Hirsch and\n                  Fabrizio Montesi},\n  title        = {Alice or Bob?: Process Polymorphism in Choreographies},\n  journal      = {CoRR},\n  volume       = {abs\/2303.04678},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.48550\/arXiv.2303.04678},\n  doi          = {10.48550\/arXiv.2303.04678},\n  eprinttype    = {arXiv},\n  eprint       = {2303.04678},\n  timestamp    = {Wed, 15 Mar 2023 17:23:45 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2303-04678.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2303-04678","authors":[{"last":false,"name":"Eva Graversen","link":"https:\/\/dblp.uni-trier.de\/pid\/199\/2114"},{"last":false,"name":"Andrew K. Hirsch","link":"https:\/\/dblp.uni-trier.de\/pid\/122\/2921"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.48550\/arXiv.2303.04678"},"compositional-choreographies":{"year":"2013","abstract":"We propose a new programming model that supports a compositionality of choreographies. The key of our approach is the introduction of partial choreographies, which can mix global descriptions with communications among external peers. We prove that if two choreographies are composable, then the endpoints independently generated from each choreography are also composable, preserving their typability and deadlock-freedom. The usability of our framework is demonstrated by modelling an industrial use case implemented in a tool for Web Services, Jolie.","collection":{"title":"2013"},"type":"inproceedings","title":"Compositional Choreographies","path":"compositional-choreographies","pdf":"my13","where":"In proceedings of CONCUR 2013, pp. 425-439","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-642-40184-8_30"},"id":101,"bibtex":"@inproceedings{DBLP:conf\/concur\/MontesiY13,\n  author       = {Fabrizio Montesi and\n                  Nobuko Yoshida},\n  editor       = {Pedro R. D'Argenio and\n                  Hern{\\'{a}}n C. Melgratti},\n  title        = {Compositional Choreographies},\n  booktitle    = {{CONCUR} 2013 - Concurrency Theory - 24th International Conference,\n                  {CONCUR} 2013, Buenos Aires, Argentina, August 27-30, 2013. Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {8052},\n  pages        = {425--439},\n  publisher    = {Springer},\n  year         = {2013},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-642-40184-8\\_30},\n  doi          = {10.1007\/978-3-642-40184-8\\_30},\n  timestamp    = {Fri, 27 Mar 2020 08:51:56 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/concur\/MontesiY13.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/concur\/MontesiY13","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Nobuko Yoshida","link":"https:\/\/dblp.uni-trier.de\/pid\/29\/3650"}],"doi":"10.1007\/978-3-642-40184-8_30"},"reasoning-about-choreographic-programs":{"year":"2023","abstract":"<p>Choreographic programming is a paradigm where a concurrent or distributed system is developed in a top-down fashion. Programs, called choreographies, detail the desired interactions between processes, and can be compiled to distributed implementations based on message passing. Choreographic languages usually guarantee deadlock-freedom and provide an operational correspondence between choreographies and their compiled implementations, but until now little work has been done on verifying other properties.<\/p><p>This paper presents a Hoare-style logic for reasoning about the behaviour of choreographies, and illustrate its usage in representative examples. We show that this logic is sound and complete, and discuss decidability of its judgements. Using existing results from choreographic programming, we show that any functional correctness property proven for a choreography also holds for its compiled implementation.<\/p>","collection":{"title":"2023"},"type":"inproceedings","title":"Reasoning About Choreographic Programs","path":"reasoning-about-choreographic-programs","pdf":"cgmp23","where":"In proceedings of COORDINATION 2023, pp. 144-162","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-031-35361-1_8"},"id":6,"bibtex":"@inproceedings{DBLP:conf\/coordination\/Cruz-FilipeGMP23,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Eva Graversen and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  editor       = {Sung{-}Shik Jongmans and\n                  Ant{\\'{o}}nia Lopes},\n  title        = {Reasoning About Choreographic Programs},\n  booktitle    = {Coordination Models and Languages - 25th {IFIP} {WG} 6.1 International\n                  Conference, {COORDINATION} 2023, Held as Part of the 18th International\n                  Federated Conference on Distributed Computing Techniques, DisCoTec\n                  2023, Lisbon, Portugal, June 19-23, 2023, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {13908},\n  pages        = {144--162},\n  publisher    = {Springer},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-031-35361-1\\_8},\n  doi          = {10.1007\/978-3-031-35361-1\\_8},\n  timestamp    = {Fri, 07 Jul 2023 23:30:43 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/coordination\/Cruz-FilipeGMP23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/coordination\/Cruz-FilipeGMP23","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Eva Graversen","link":"https:\/\/dblp.uni-trier.de\/pid\/199\/2114"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.1007\/978-3-031-35361-1_8"},"classical-transitions-arxiv":{"year":"2018","abstract":"We introduce the calculus of Classical Transitions (CT), which extends the\nresearch line on the relationship between linear logic and processes to\nlabelled transitions. The key twist from previous work is registering\nparallelism in typing judgements, by generalising linear logic judgements from\none sequents to many (hypersequents). This allows us to bridge the gap between\nthe structures of operators used as proof terms in previous work and those of\nthe standard {\\pi}-calculus (in particular parallel operator and restriction).\nThe proof theory of CT allows for new proof transformations, which we show\ncorrespond to a labelled transition system (LTS) for processes. We prove that\nCT enjoys subject reduction and progress.","collection":{"title":"2018"},"title":"Classical Transitions","type":"article","path":"classical-transitions-arxiv","where":"In CoRR abs\/1803.01049","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1803.01049"},"id":57,"bibtex":"@article{DBLP:journals\/corr\/abs-1803-01049,\n  author       = {Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Classical Transitions},\n  journal      = {CoRR},\n  volume       = {abs\/1803.01049},\n  year         = {2018},\n  url          = {http:\/\/arxiv.org\/abs\/1803.01049},\n  eprinttype    = {arXiv},\n  eprint       = {1803.01049},\n  timestamp    = {Mon, 13 Aug 2018 16:48:04 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1803-01049.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1803-01049","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"guest-editorial":{"year":"2015","abstract":"Special Issue on Service-Oriented Architectures and Programming (SOAP 2014).","collection":{"title":"2015"},"type":"article","title":"Guest Editorial: Special Issue on Service-Oriented Architectures and Programming","path":"guest-editorial","where":"In J. Internet Serv. Inf. Secur. 5","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.22667\/JISIS.2015.02.31.001"},"id":87,"bibtex":"@article{DBLP:journals\/jisis\/BravettiLMM15,\n  author       = {Mario Bravetti and\n                  Alberto Lluch{-}Lafuente and\n                  Manuel Mazzara and\n                  Fabrizio Montesi},\n  title        = {Guest Editorial: Special Issue on Service-Oriented Architectures and\n                  Programming},\n  journal      = {J. Internet Serv. Inf. Secur.},\n  volume       = {5},\n  number       = {1},\n  pages        = {1--2},\n  year         = {2015},\n  url          = {https:\/\/doi.org\/10.22667\/JISIS.2015.02.31.001},\n  doi          = {10.22667\/JISIS.2015.02.31.001},\n  timestamp    = {Thu, 23 May 2019 15:00:55 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/jisis\/BravettiLMM15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/jisis\/BravettiLMM15","authors":[{"last":false,"name":"Mario Bravetti","link":"https:\/\/dblp.uni-trier.de\/pid\/08\/5320"},{"last":false,"name":"Alberto Lluch-Lafuente","link":"https:\/\/dblp.uni-trier.de\/pid\/l\/AlbertoLluchLafuente"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.22667\/JISIS.2015.02.31.001"},"ephemeral-data-handling-in-microservices-with-tquery":{"year":"2022","abstract":"<jats:p>The adoption of edge and fog systems, along with the introduction of privacy-preserving regulations, compel the usage of tools for expressing complex data queries in an ephemeral way. That is, queried data should not persist. Database engines partially address this need, as they provide domain-specific languages for querying data. Unfortunately, using a database in an ephemeral setting has inessential issues related to throughput bottlenecks, scalability, dependency management, and security (<jats:italic>e.g.<\/jats:italic>, query injection). Moreover, databases can impose specific data structures and data formats, which can hinder the development of microservice architectures that integrate heterogeneous systems and handle semi-structured data. In this article, we present Jolie\/Tquery, the first query framework designed for ephemeral data handling in microservices. Jolie\/Tquery joins the benefits of a technology-agnostic, microservice-oriented programming language, Jolie, and of one of the most widely-used query languages for semi-structured data in microservices, the MongoDB aggregation framework. To make Jolie\/Tquery reliable for the users, we follow a cleanroom software engineering process. First, we define Tquery, a theory for querying semi-structured data compatible with Jolie and inspired by a consistent variant of the key operators of the MongoDB aggregation framework. Then, we describe how we implemented Jolie\/Tquery following Tquery and how the Jolie type system naturally captures the syntax of Tquery and helps to preserve its invariants. To both illustrate Tquery and Jolie\/Tquery, we present the use case of a medical algorithm and build our way to a microservice that implements it using Jolie\/Tquery. Finally, we report microbenchmarks that validate the expectation that, in the ephemeral case, using Jolie\/Tquery outperforms using an external database (MongoDB, specifically).<\/jats:p>","collection":{"title":"2022"},"type":"article","title":"Ephemeral data handling in microservices with Tquery","path":"ephemeral-data-handling-in-microservices-with-tquery","pdf":"gmsz22","where":"In PeerJ Comput. Sci. 8","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.7717\/peerj-cs.1037"},"id":18,"bibtex":"@article{DBLP:journals\/peerj-cs\/GiallorenzoMSZ22,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Larisa Safina and\n                  Stefano Pio Zingaro},\n  title        = {Ephemeral data handling in microservices with Tquery},\n  journal      = {PeerJ Comput. Sci.},\n  volume       = {8},\n  pages        = {e1037},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.7717\/peerj-cs.1037},\n  doi          = {10.7717\/peerj-cs.1037},\n  timestamp    = {Sat, 30 Sep 2023 10:23:31 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/peerj-cs\/GiallorenzoMSZ22.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/peerj-cs\/GiallorenzoMSZ22","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"},{"last":true,"name":"Stefano Pio Zingaro","link":"https:\/\/dblp.uni-trier.de\/pid\/220\/4883"}],"doi":"10.7717\/peerj-cs.1037"},"a-formal-theory-of-choreographic-programming":{"year":"2023","abstract":"<jats:p>Choreographic programming is a paradigm for writing coordination plans for distributed systems from a global point of view, from which correct-by-construction decentralised implementations can be generated automatically. Theory of choreographies typically includes a number of complex results that are proved by structural induction. The high number of cases and the subtle details in some of these proofs has led to important errors being found in published works. In this work, we formalise the theory of a choreographic programming language in Coq. Our development includes the basic properties of this language, a proof of its Turing completeness, a compilation procedure to a process language, and an operational characterisation of the correctness of this procedure. Our formalisation experience illustrates the benefits of using a theorem prover: we get both an additional degree of confidence from the mechanised proof, and a significant simplification of the underlying theory. Our results offer a foundation for the future formal development of choreographic languages.<\/jats:p>","collection":{"title":"2023"},"type":"article","title":"A Formal Theory of Choreographic Programming","path":"a-formal-theory-of-choreographic-programming","pdf":"cmp23","where":"In J. Autom. Reason. 67","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/s10817-023-09665-3"},"id":4,"bibtex":"@article{DBLP:journals\/jar\/CruzFilipeMP23,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {A Formal Theory of Choreographic Programming},\n  journal      = {J. Autom. Reason.},\n  volume       = {67},\n  number       = {2},\n  pages        = {21},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.1007\/s10817-023-09665-3},\n  doi          = {10.1007\/s10817-023-09665-3},\n  timestamp    = {Tue, 12 Sep 2023 07:57:44 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/jar\/CruzFilipeMP23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/jar\/CruzFilipeMP23","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.1007\/s10817-023-09665-3"},"communications-in-choreographies-revisited":{"year":"2018","abstract":"<p>Choreographic Programming is a paradigm for developing correctby-construction concurrent programs, by writing high-level descriptions of the desired communications and then synthesising process implementations automatically. So far, choreographic programming has been explored in the monadic setting: interaction terms express point-to-point communications of a single value. However, realworld systems often rely on interactions of polyadic nature, where multiple values are communicated among two or more parties, like multicast, scatter-gather, and atomic exchanges.<\/p><p>We introduce a new model for choreographic programming equipped with a primitive for grouped interactions that subsumes all the above scenarios. Intuitively, grouped interactions can be thought of as being carried out as one single interaction. In practice, they are implemented by processes that carry them out in a concurrent fashion. After formalising the intuitive semantics of grouped interactions, we prove that choreographic programs and their implementations are correct and deadlock-free by construction.<\/p>","collection":{"title":"2018"},"type":"inproceedings","title":"Communications in choreographies, revisited","path":"communications-in-choreographies-revisited","pdf":"cmp18","where":"In proceedings of SAC 2018, pp. 1248-1255","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1145\/3167132.3167267"},"id":52,"bibtex":"@inproceedings{DBLP:conf\/sac\/Cruz-FilipeMP18,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  editor       = {Hisham M. Haddad and\n                  Roger L. Wainwright and\n                  Richard Chbeir},\n  title        = {Communications in choreographies, revisited},\n  booktitle    = {Proceedings of the 33rd Annual {ACM} Symposium on Applied Computing,\n                  {SAC} 2018, Pau, France, April 09-13, 2018},\n  pages        = {1248--1255},\n  publisher    = {{ACM}},\n  year         = {2018},\n  url          = {https:\/\/doi.org\/10.1145\/3167132.3167267},\n  doi          = {10.1145\/3167132.3167267},\n  timestamp    = {Wed, 25 Sep 2019 18:12:14 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/sac\/Cruz-FilipeMP18.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/sac\/Cruz-FilipeMP18","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.1145\/3167132.3167267"},"model-driven-generation-of-microservice-interfaces":{"year":"2022","abstract":"We introduce LEMMA2Jolie, a tool for translating domain models of microservice architectures given in LEMMA into concrete APIs of microservices in the Jolie programming language. Our tool combines the state of the art for the design and implementation of microservices: developers can use Domain-Driven Design (DDD) for the construction of the domain models of a microservice architecture, and then automatically transition to a serviceoriented programming language that provides native linguistic support for implementing the behaviour of each microservice.","collection":{"title":"2022"},"type":"inproceedings","title":"Model-Driven Generation of Microservice Interfaces: From LEMMA Domain Models to Jolie APIs","path":"model-driven-generation-of-microservice-interfaces","pdf":"gmpr22","where":"In proceedings of COORDINATION 2022, pp. 223-240","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-031-08143-9_13"},"id":20,"bibtex":"@inproceedings{DBLP:conf\/coordination\/GiallorenzoMPR22,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Florian Rademacher},\n  editor       = {Maurice H. ter Beek and\n                  Marjan Sirjani},\n  title        = {Model-Driven Generation of Microservice Interfaces: From {LEMMA} Domain\n                  Models to Jolie APIs},\n  booktitle    = {Coordination Models and Languages - 24th {IFIP} {WG} 6.1 International\n                  Conference, {COORDINATION} 2022, Held as Part of the 17th International\n                  Federated Conference on Distributed Computing Techniques, DisCoTec\n                  2022, Lucca, Italy, June 13-17, 2022, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {13271},\n  pages        = {223--240},\n  publisher    = {Springer},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-031-08143-9\\_13},\n  doi          = {10.1007\/978-3-031-08143-9\\_13},\n  timestamp    = {Tue, 28 Jun 2022 21:08:26 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/coordination\/GiallorenzoMPR22.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/coordination\/GiallorenzoMPR22","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":true,"name":"Florian Rademacher","link":"https:\/\/dblp.uni-trier.de\/pid\/167\/5000"}],"doi":"10.1007\/978-3-031-08143-9_13"},"keep-me-out-of-the-loop":{"year":"2023","abstract":"<jats:p>Choreographic programming is a paradigm where programmers write global descrip- tions of distributed protocols, called choreographies, and correct implementations are au- tomatically generated by a mechanism called projection. Not all choreographies are pro- jectable, because decisions made by one process must be communicated to other processes whose behaviour depends on them \u2013 a property known as knowledge of choice.<\/jats:p><jats:p>The standard formulation of knowledge of choice disallows protocols such as third-party authentication with retries, where two processes iteratively interact, and other processes wait to be notified at the end of this loop. In this work we show how knowledge of choice can be weakened, extending the class of projectable choreographies with these and other interesting behaviours. The whole development is formalised in Coq. Working with a proof assistant was crucial to our development, because of the help it provided with detecting counterintuitive edge cases that would otherwise have gone unnoticed.<\/jats:p>","collection":{"title":"2023"},"type":"inproceedings","title":"Keep me out of the loop: a more flexible choreographic projection","path":"keep-me-out-of-the-loop","pdf":"cmr23","where":"In proceedings of LPAR 2023, pp. 144-163","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.29007\/wbw3"},"id":12,"bibtex":"@inproceedings{DBLP:conf\/lpar\/Cruz-FilipeMR23,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Robert R. Rasmussen},\n  editor       = {Ruzica Piskac and\n                  Andrei Voronkov},\n  title        = {Keep me out of the loop: a more flexible choreographic projection},\n  booktitle    = {{LPAR} 2023: Proceedings of 24th International Conference on Logic\n                  for Programming, Artificial Intelligence and Reasoning, Manizales,\n                  Colombia, 4-9th June 2023},\n  series       = {EPiC Series in Computing},\n  volume       = {94},\n  pages        = {144--163},\n  publisher    = {EasyChair},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.29007\/wbw3},\n  doi          = {10.29007\/wbw3},\n  timestamp    = {Sat, 30 Sep 2023 09:52:10 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/lpar\/Cruz-FilipeMR23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/lpar\/Cruz-FilipeMR23","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Robert R. Rasmussen","link":"https:\/\/dblp.uni-trier.de\/pid\/351\/3646"}],"doi":"10.29007\/wbw3"},"choreographies-as-functions-arxiv":{"peerReviewedVersion":"conf\/ictac\/Cruz-FilipeGLMP22","year":"2021","abstract":"Choreographic programming is an emerging programming paradigm for concurrent\nand distributed systems, whereby developers write the communications that\nshould be enacted and then a distributed implementation is automatically\nobtained by means of a compiler. Theories of choreographic programming\ntypically come with strong theoretical guarantees about the compilation\nprocess, most notably: the generated implementations operationally correspond\nto their source choreographies and are deadlock-free.\n  Currently, the most advanced incarnation of the paradigm is Choral, an\nobject-oriented choreographic programming language that targets Java. Choral\ndeviated significantly from known theories of choreographies, and introduced\nthe possibility of expressing higher-order choreographies (choreographies\nparameterised over choreographies) that are fully distributed. As a\nconsequence, it is unclear if the usual guarantees of choreographies can still\nhold in the more general setting of higher-order ones.\n  We introduce Chor{\\lambda}, the first functional choreographic programming\nlanguage: it introduces a new formulation of the standard communication\nprimitive found in choreographies as a function, and it is based upon the\n{\\lambda}-calculus. Chor{\\lambda} is the first theory that explains the core\nideas of higher-order choreographic programming (as in Choral). Bridging the\ngap between practice and theory requires developing a new evaluation strategy\nand typing discipline for {\\lambda} terms that accounts for the distributed\nnature of computation in choreographies. We illustrate the expressivity of\nChor{\\lambda} with a series of examples, which include reconstructions of the\nkey examples from the original presentation of Choral. Our theory supports the\nexpected properties of choreographic programming and bridges the gap between\nthe communities of functional and choreographic programming.","collection":{"title":"2021"},"type":"article","title":"Choreographies as Functions","path":"choreographies-as-functions-arxiv","where":"In CoRR abs\/2111.03701","links":{"last":true,"name":"arxiv.org","href":"https:\/\/arxiv.org\/abs\/2111.03701"},"id":38,"bibtex":"@article{DBLP:journals\/corr\/abs-2111-03701,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Eva Graversen and\n                  Lovro Lugovic and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Choreographies as Functions},\n  journal      = {CoRR},\n  volume       = {abs\/2111.03701},\n  year         = {2021},\n  url          = {https:\/\/arxiv.org\/abs\/2111.03701},\n  eprinttype    = {arXiv},\n  eprint       = {2111.03701},\n  timestamp    = {Wed, 10 Nov 2021 16:07:30 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2111-03701.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2111-03701","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Eva Graversen","link":"https:\/\/dblp.uni-trier.de\/pid\/199\/2114"},{"last":false,"name":"Lovro Lugovic","link":"https:\/\/dblp.uni-trier.de\/pid\/305\/8036"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"a-formal-theory-of-choreographic-programming-arxiv":{"year":"2022","abstract":"Choreographic programming is a paradigm for writing coordination plans for\ndistributed systems from a global point of view, from which\ncorrect-by-construction decentralised implementations can be generated\nautomatically.\n  Theory of choreographies typically includes a number of complex results that\nare proved by structural induction. The high number of cases and the subtle\ndetails in some of these proofs has led to important errors being found in\npublished works.\n  In this work, we formalise the theory of a choreographic programming language\nin Coq. Our development includes the basic properties of this language, a proof\nof its Turing completeness, a compilation procedure to a process language, and\nan operational characterisation of the correctness of this procedure.\n  Our formalisation experience illustrates the benefits of using a theorem\nprover: we get both an additional degree of confidence from the mechanised\nproof, and a significant simplification of the underlying theory. Our results\noffer a foundation for the future formal development of choreographic\nlanguages.","collection":{"title":"2022"},"type":"article","title":"A Formal Theory of Choreographic Programming","path":"a-formal-theory-of-choreographic-programming-arxiv","where":"In CoRR abs\/2209.01886","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.48550\/arXiv.2209.01886"},"id":27,"bibtex":"@article{DBLP:journals\/corr\/abs-2209-01886,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {A Formal Theory of Choreographic Programming},\n  journal      = {CoRR},\n  volume       = {abs\/2209.01886},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.48550\/arXiv.2209.01886},\n  doi          = {10.48550\/arXiv.2209.01886},\n  eprinttype    = {arXiv},\n  eprint       = {2209.01886},\n  timestamp    = {Mon, 26 Sep 2022 18:12:06 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2209-01886.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2209-01886","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.48550\/arXiv.2209.01886"},"a-core-model-for-choreographic-programming-journal":{"year":"2020","abstract":"<p>Choreographic Programming is a paradigm for developing concurrent programs that are deadlock-free by construction, as a result of programming communications declaratively and then synthesising process implementations automatically. Despite strong interest on choreographies, a foundational model that explains which computations can be performed with the hallmark constructs of choreographies is still missing.<\/p><p>In this work, we introduce Core Choreographies (CC), a model that includes only the core primitives of choreographic programming. Every computable function can be implemented as a choreography in CC, from which we can synthesise a process implementation where independent computations run in parallel. We discuss the design of CC and argue that it constitutes a canonical model for choreographic programming.<\/p>","collection":{"title":"2020"},"type":"article","title":"A core model for choreographic programming","path":"a-core-model-for-choreographic-programming-journal","pdf":"cm20","where":"In Theor. Comput. Sci. 802","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1016\/j.tcs.2019.07.005"},"id":39,"bibtex":"@article{DBLP:journals\/tcs\/Cruz-FilipeM20,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  title        = {A core model for choreographic programming},\n  journal      = {Theor. Comput. Sci.},\n  volume       = {802},\n  pages        = {38--66},\n  year         = {2020},\n  url          = {https:\/\/doi.org\/10.1016\/j.tcs.2019.07.005},\n  doi          = {10.1016\/j.tcs.2019.07.005},\n  timestamp    = {Mon, 26 Oct 2020 08:45:43 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/tcs\/Cruz-FilipeM20.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/tcs\/Cruz-FilipeM20","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1016\/j.tcs.2019.07.005"},"reasoning-about-a-service-oriented-programming-paradigm-arxiv":{"year":"2009","abstract":"This paper is about a new way for programming distributed applications: the\nservice-oriented one. It is a concept paper based upon our experience in\ndeveloping a theory and a language for programming services. Both the\ntheoretical formalization and the language interpreter showed us the evidence\nthat a new programming paradigm exists. In this paper we illustrate the basic\nfeatures it is characterized by.","collection":{"title":"2009"},"type":"inproceedings","title":"Reasoning About a Service-oriented Programming Paradigm","path":"reasoning-about-a-service-oriented-programming-paradigm-arxiv","pdf":"gm09","where":"In proceedings of YR-SOC 2009, pp. 67-81","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/0906.3920"},"id":114,"bibtex":"@inproceedings{DBLP:journals\/corr\/abs-0906-3920,\n  author       = {Claudio Guidi and\n                  Fabrizio Montesi},\n  editor       = {Maurice H. ter Beek},\n  title        = {Reasoning About a Service-oriented Programming Paradigm},\n  booktitle    = {Proceedings Fourth European Young Researchers Workshop on Service\n                  Oriented Computing, {YR-SOC} 2009, Pisa, Italy, 17-19th June 2009},\n  series       = {{EPTCS}},\n  volume       = {2},\n  pages        = {67--81},\n  year         = {2009},\n  url          = {http:\/\/arxiv.org\/abs\/0906.3920},\n  timestamp    = {Mon, 13 Aug 2018 16:48:39 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-0906-3920.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-0906-3920","authors":[{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"classical-higher-order-processes-arxiv":{"year":"2018","abstract":"Classical Processes (CP) is a calculus where the proof theory of classical\nlinear logic types communicating processes with mobile channels, a la\npi-calculus. Its construction builds on a recent propositions as types\ncorrespondence between session types and propositions in linear logic.\nDesirable properties such as type preservation under reductions and progress\ncome for free from the metatheory of linear logic.\n  We contribute to this research line by extending CP with code mobility. We\ngeneralise classical linear logic to capture higher-order (linear) reasoning on\nproofs, which yields a logical reconstruction of (a variant of) the\nHigher-Order pi-calculus (HOpi). The resulting calculus is called Classical\nHigher-Order Processes (CHOP). We explore the metatheory of CHOP, proving that\nits semantics enjoys type preservation and progress (terms do not get stuck).\nWe also illustrate the expressivity of CHOP through examples, derivable syntax\nsugar, and an extension to multiparty sessions. Lastly, we define a translation\nfrom CHOP to CP, which encodes mobility of process code into reference passing.","collection":{"title":"2018"},"title":"Classical Higher-Order Processes","type":"article","path":"classical-higher-order-processes-arxiv","where":"In CoRR abs\/1802.02917","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1802.02917"},"id":56,"bibtex":"@article{DBLP:journals\/corr\/abs-1802-02917,\n  author       = {Fabrizio Montesi},\n  title        = {Classical Higher-Order Processes},\n  journal      = {CoRR},\n  volume       = {abs\/1802.02917},\n  year         = {2018},\n  url          = {http:\/\/arxiv.org\/abs\/1802.02917},\n  eprinttype    = {arXiv},\n  eprint       = {1802.02917},\n  timestamp    = {Mon, 13 Aug 2018 16:46:22 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1802-02917.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1802-02917","authors":{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}},"microservices-arxiv":{"peerReviewedVersion":"books\/sp\/17\/DragoniGLMMMS17","year":"2016","abstract":"Microservices is an architectural style inspired by service-oriented\ncomputing that has recently started gaining popularity. Before presenting the\ncurrent state-of-the-art in the field, this chapter reviews the history of\nsoftware architecture, the reasons that led to the diffusion of objects and\nservices first, and microservices later. Finally, open problems and future\nchallenges are introduced. This survey primarily addresses newcomers to the\ndiscipline, while offering an academic viewpoint on the topic. In addition, we\ninvestigate some practical issues and point out some potential solutions.","collection":{"title":"2016"},"type":"article","title":"Microservices: yesterday, today, and tomorrow","path":"microservices-arxiv","pdf":"dglmmms16","where":"In CoRR abs\/1606.04036","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1606.04036"},"id":84,"bibtex":"@article{DBLP:journals\/corr\/DragoniGLMMMS16,\n  author       = {Nicola Dragoni and\n                  Saverio Giallorenzo and\n                  Alberto Lluch{-}Lafuente and\n                  Manuel Mazzara and\n                  Fabrizio Montesi and\n                  Ruslan Mustafin and\n                  Larisa Safina},\n  title        = {Microservices: yesterday, today, and tomorrow},\n  journal      = {CoRR},\n  volume       = {abs\/1606.04036},\n  year         = {2016},\n  url          = {http:\/\/arxiv.org\/abs\/1606.04036},\n  eprinttype    = {arXiv},\n  eprint       = {1606.04036},\n  timestamp    = {Mon, 13 Aug 2018 16:46:13 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/DragoniGLMMMS16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/DragoniGLMMMS16","authors":[{"last":false,"name":"Nicola Dragoni","link":"https:\/\/dblp.uni-trier.de\/pid\/85\/3106"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Alberto Lluch-Lafuente","link":"https:\/\/dblp.uni-trier.de\/pid\/l\/AlbertoLluchLafuente"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Ruslan Mustafin","link":"https:\/\/dblp.uni-trier.de\/pid\/182\/2521"},{"last":true,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"}]},"choreographic-programming":{"notes":[{"text":"<award>EAPLS Best PhD Dissertation Award (2014)<\/award>"},{"text":"ISBN: 9788779492998"}],"year":"2013","abstract":"<p>Choreographies are descriptions of distributed systems where the developer gives a global view of how messages are exchanged by endpoint nodes (endpoints for short), instead of separately defining the behaviour of each endpoint. They have a significant impact on the quality of software, as they offer a concise view of the message flows enacted by a system. For this reason, in the last decade choreographies have been employed in the development of programming languages, giving rise to a programming paradigm that in this dissertation we refer to as Choreographic Programming.<\/p><p>Recent formal investigations of choreographies show that they have potential as foundations for the development of safe distributed software. The key idea is that since choreographies abstract from the single input\/output actions of endpoints, they avoid typical safety problems such as deadlocks and race conditions; the concrete implementation of each endpoint described in a choreography can then be automatically obtained by compilation, ensuring that such implementations are also safe by construction from the originating choreography. However, current formal models for choreographies do not deal with critical aspects of distributed programming, such as asynchrony, mobility, modularity, and multiparty sessions; it remains thus unclear whether choreographies can still guarantee safety when dealing with such nontrivial features.<\/p><p>This PhD dissertation argues for the usefulness of choreographic programming as a paradigm for the development of safe distributed systems. We proceed by investigating its foundations and application. To this aim we provide three main contributions.<\/p><p>The first contribution is the development of a formal model and type theory for choreographic programming that support asynchrony, mobility, modular development, and multiparty sessions. We prove that our model guarantees safety by mapping choreographies to distributed implementations in terms of a variant of the π-calculus, the reference model for mobile processes. Our translation preserves the expected safety properties of choreographies, among which freedom from deadlocks and race conditions.<\/p><p>The second contribution is the development of Linear Connection Logic (LCL), a formal logic that captures the reasoning behind choreographic programming. We show that LCL is a conservative extension of Linear Logic. We then develop a Curry-Howard correspondence between LCL and a calculus of choreographies, proving that: (i) proofs in LCL correspond to choreographies; and (ii) the transformations between proofs in LCL to proofs in Linear Logic and vice versa correspond to compiling choreography programs to π-calculus terms and vice versa. The latter result, known as round-trip development, contributes to the open problem of extracting choreographies from existing endpoint programs.<\/p><p>The third contribution is the implementation of a prototype programming framework for choreographic programming, called Chor. Chor provides an Integrated Development Environment (IDE) for programming with choreographies, equipped with a type checker for verifying that choreographies respect protocol specifications given as session types. Programs in Chor can be compiled to executable endpoint implementation in the Jolie programming language, a general-purpose language for distributed computing, which we extend to support the development of multiparty asynchronous sessions. We use Chor for evaluating choreographic programming against a series of use cases.<\/p>","collection":{"title":"Highlights"},"title":"Choreographic Programming","type":"phd","path":"choreographic-programming","pdf":"choreographic-programming","where":"PhD Thesis, IT University of Copenhagen","links":[{"last":false,"name":"Wikipedia","href":"https:\/\/en.wikipedia.org\/wiki\/Choreographic_programming"},{"last":true,"name":"Award announcement","href":"https:\/\/eapls.org\/items\/1855\/"}],"id":1,"bibtex":"@PhdThesis{M13:phd,\r\n  author = \"Fabrizio Montesi\",\r\n  title = \"Choreographic {P}rogramming\",\r\n  school = \"IT University of Copenhagen\",\r\n  type = \"Ph.{D}. Thesis\",\r\n  year = 2013,\r\n  note = {\\url{https:\/\/www.fabriziomontesi.com\/files\/choreographic-programming.pdf}}\r\n}","key":"M13:phd","authors":{"last":true,"name":"Fabrizio Montesi"}},"choreographies-logically-journal":{"year":"2018","abstract":"<p>In Choreographic Programming, a distributed system is programmed by giving a choreography, a global description of its interactions, instead of separately specifying the behaviour of each of its processes. Process implementations in terms of a distributed language can then be automatically projected from a choreography.<\/p><p>We present Linear Compositional Choreographies (LCC), a proof theory for reasoning about programs that modularly combine choreographies with processes. Using LCC, we logically reconstruct a semantics and a projection procedure for programs. For the first time, we also obtain a procedure for extracting choreographies from process terms.<\/p>","collection":{"title":"2018"},"type":"article","title":"Choreographies, logically","path":"choreographies-logically-journal","pdf":"cms18","where":"In Distributed Comput. 31","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/s00446-017-0295-1"},"id":49,"bibtex":"@article{DBLP:journals\/dc\/CarboneMS18,\n  author       = {Marco Carbone and\n                  Fabrizio Montesi and\n                  Carsten Sch{\\\"{u}}rmann},\n  title        = {Choreographies, logically},\n  journal      = {Distributed Comput.},\n  volume       = {31},\n  number       = {1},\n  pages        = {51--67},\n  year         = {2018},\n  url          = {https:\/\/doi.org\/10.1007\/s00446-017-0295-1},\n  doi          = {10.1007\/s00446-017-0295-1},\n  timestamp    = {Fri, 13 Mar 2020 14:37:38 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/dc\/CarboneMS18.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/dc\/CarboneMS18","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Carsten Schürmann","link":"https:\/\/dblp.uni-trier.de\/pid\/07\/4034"}],"doi":"10.1007\/s00446-017-0295-1"},"bridging-the-gap-between-interaction-and-process-oriented-choreographies":{"year":"2008","abstract":"In service oriented computing, choreography languages are used to specify multi-party service compositions. Two main approaches have been followed: the interaction-oriented approach of WS-CDL and the process-oriented approach of BPEL4Chor. We investigate the relationship between them.In particular, we consider several interpretations for interaction-oriented choreographies spanning from synchronous to asynchronous communication. Under each of these interpretations we characterize the class of interaction-oriented choreographies which have a process-oriented counterpart, and we formalize the notion of equivalence between the initial interaction-oriented choreography and the corresponding process-oriented one.","collection":{"title":"2008"},"type":"inproceedings","title":"Bridging the Gap between Interaction- and Process-Oriented Choreographies","path":"bridging-the-gap-between-interaction-and-process-oriented-choreographies","pdf":"lgmz08","where":"In proceedings of SEFM 2008, pp. 323-332","links":{"last":true,"name":"doi.ieeecomputersociety.org","href":"https:\/\/doi.ieeecomputersociety.org\/10.1109\/SEFM.2008.11"},"id":117,"bibtex":"@inproceedings{DBLP:conf\/sefm\/LaneseGMZ08,\n  author       = {Ivan Lanese and\n                  Claudio Guidi and\n                  Fabrizio Montesi and\n                  Gianluigi Zavattaro},\n  editor       = {Antonio Cerone and\n                  Stefan Gruner},\n  title        = {Bridging the Gap between Interaction- and Process-Oriented Choreographies},\n  booktitle    = {Sixth {IEEE} International Conference on Software Engineering and\n                  Formal Methods, {SEFM} 2008, Cape Town, South Africa, 10-14 November\n                  2008},\n  pages        = {323--332},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2008},\n  url          = {https:\/\/doi.org\/10.1109\/SEFM.2008.11},\n  doi          = {10.1109\/SEFM.2008.11},\n  timestamp    = {Fri, 24 Mar 2023 00:03:36 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/sefm\/LaneseGMZ08.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/sefm\/LaneseGMZ08","authors":[{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}]},"real-world-choreographic-programming-arxiv":{"year":"2023","abstract":"Choreographic programming is a programming paradigm, whereby the overall\nbehaviour of a distributed system is coded as a choreography from a global\nviewpoint. The choreography can then be automatically compiled (projected) to a\ncorrect implementation for each participant.\n  Choreographic programming relieves the programmer from manually writing the\nseparate send and receive actions performed by participants and avoids the\nproblem of communication mismatches. However, the applicability of this\nparadigm in the real world remains largely unexplored for two reasons. First,\nwhile there have been several proposals of choreographic programming languages,\nnone of them have been used to implement a realistic, widely-used protocol.\nThus there is a lack of experience on how realistic choreographic programs are\nstructured and on the relevance of the features explored in theoretical models.\nSecond, applications of choreographic programming shown so far are intrusive\nsince each participant must use exactly the code projected from the\nchoreography. This prevents using the projected code with existing third-party\nimplementations of some participants.\n  We carry out the first development in choreographic programming of a\nwidespread real-world protocol: the Internet Relay Chat (IRC) protocol. Our\ndevelopment is based on Choral, an object-oriented choreographic programming\nlanguage. Two of Choral's features are key to our implementation: higher-order\nchoreographies for modelling the complex interaction patterns due to IRC's\nasynchronous nature; and user-definable communication semantics for achieving\ninteroperability with third-party implementations. We also discover a missing\npiece: the capability of statically detecting that choices on alternative\ndistributed behaviours are appropriately communicated by means of message\ntypes. We extend the Choral compiler with an elegant solution based on\nsubtyping.","collection":{"title":"2023"},"type":"article","title":"Real-World Choreographic Programming: An Experience Report","path":"real-world-choreographic-programming-arxiv","pdf":"lm23-arxiv","where":"In CoRR abs\/2303.03983","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.48550\/arXiv.2303.03983"},"id":15,"bibtex":"@article{DBLP:journals\/corr\/abs-2303-03983,\n  author       = {Lovro Lugovic and\n                  Fabrizio Montesi},\n  title        = {Real-World Choreographic Programming: An Experience Report},\n  journal      = {CoRR},\n  volume       = {abs\/2303.03983},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.48550\/arXiv.2303.03983},\n  doi          = {10.48550\/arXiv.2303.03983},\n  eprinttype    = {arXiv},\n  eprint       = {2303.03983},\n  timestamp    = {Wed, 15 Mar 2023 17:23:45 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2303-03983.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2303-03983","authors":[{"last":false,"name":"Lovro Lugovic","link":"https:\/\/dblp.uni-trier.de\/pid\/305\/8036"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.48550\/arXiv.2303.03983"},"the-servers-of-serverless-computing":{"year":"2020","abstract":"Serverless computing is a paradigm for programming cloud applications in terms of stateless functions, executed and scaled in proportion to inbound requests. Here, we revisit SKC, a calculus capturing the essential features of serverless programming. By exploring the design space of the language, we refined the integration between the fundamental features of the two calculi that inspire SKC: the λ- and the π-calculus. That investigation led us to a revised syntax and semantics, which support an increase in the expressiveness of the language. In particular, now function names are first-class citizens and can be passed around. To illustrate the new features, we present step-by-step examples and two non-trivial use cases from artificial intelligence, which model, respectively, a perceptron and an image tagging system into compositions of serverless functions. We also illustrate how SKC supports reasoning on serverless implementations, i.e., the underlying network of communicating, concurrent, and mobile processes which execute serverless functions in the cloud. To that aim, we show an encoding from SKC to the asynchronous π-calculus and prove it correct in terms of an operational correspondence.","collection":{"title":"2020"},"type":"inproceedings","title":"The Servers of Serverless Computing: A Formal Revisitation of Functions as a Service","path":"the-servers-of-serverless-computing","pdf":"glmsz20","where":"In proceedings of Gabbrielli's Festschrift 2020, pp. 5:1-5:21","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.4230\/OASIcs.Gabbrielli.5"},"id":40,"bibtex":"@inproceedings{DBLP:conf\/birthday\/GiallorenzoLMSZ20,\n  author       = {Saverio Giallorenzo and\n                  Ivan Lanese and\n                  Fabrizio Montesi and\n                  Davide Sangiorgi and\n                  Stefano Pio Zingaro},\n  editor       = {Frank S. de Boer and\n                  Jacopo Mauro},\n  title        = {The Servers of Serverless Computing: {A} Formal Revisitation of Functions\n                  as a Service},\n  booktitle    = {Recent Developments in the Design and Implementation of Programming\n                  Languages, Gabbrielli's Festschrift, November 27, 2020, Bologna, Italy},\n  series       = {OASIcs},\n  volume       = {86},\n  pages        = {5:1--5:21},\n  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\n  year         = {2020},\n  url          = {https:\/\/doi.org\/10.4230\/OASIcs.Gabbrielli.5},\n  doi          = {10.4230\/OASIcs.Gabbrielli.5},\n  timestamp    = {Sat, 30 Sep 2023 09:35:34 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/birthday\/GiallorenzoLMSZ20.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/birthday\/GiallorenzoLMSZ20","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Davide Sangiorgi","link":"https:\/\/dblp.uni-trier.de\/pid\/s\/DavideSangiorgi"},{"last":true,"name":"Stefano Pio Zingaro","link":"https:\/\/dblp.uni-trier.de\/pid\/220\/4883"}],"doi":"10.4230\/OASIcs.Gabbrielli.5"},"the-paths-to-choreography-extraction":{"year":"2017","abstract":"<p>Choreographies are global descriptions of interactions among concurrent components, most notably used in the settings of verification and synthesis of correct-by-construction software. They require a top-down approach: programmers first write choreographies, and then use them to verify or synthesize their programs. However, most software does not come with choreographies yet, which prevents their application. To attack this problem, previous work investigated choreography extraction, which automatically constructs a choreography that describes the behavior of a given set of programs or protocol specifications.<\/p><p>We propose a new extraction methodology that improves on the state of the art: we can deal with programs that are equipped with state and internal computation; time complexity is dramatically better; and we capture programs that work by exploiting asynchronous communication.<\/p>","collection":{"title":"2017"},"type":"inproceedings","title":"The Paths to Choreography Extraction","path":"the-paths-to-choreography-extraction","pdf":"clm17","where":"In proceedings of FoSSaCS 2017, pp. 424-440","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-662-54458-7_25"},"id":65,"bibtex":"@inproceedings{DBLP:conf\/fossacs\/Cruz-FilipeLM17,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Kim S. Larsen and\n                  Fabrizio Montesi},\n  editor       = {Javier Esparza and\n                  Andrzej S. Murawski},\n  title        = {The Paths to Choreography Extraction},\n  booktitle    = {Foundations of Software Science and Computation Structures - 20th\n                  International Conference, {FOSSACS} 2017, Held as Part of the European\n                  Joint Conferences on Theory and Practice of Software, {ETAPS} 2017,\n                  Uppsala, Sweden, April 22-29, 2017, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {10203},\n  pages        = {424--440},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-662-54458-7\\_25},\n  doi          = {10.1007\/978-3-662-54458-7\\_25},\n  timestamp    = {Wed, 25 Sep 2019 18:04:52 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/fossacs\/Cruz-FilipeLM17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/fossacs\/Cruz-FilipeLM17","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Kim S. Larsen","link":"https:\/\/dblp.uni-trier.de\/pid\/l\/KimSLarsen"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-662-54458-7_25"},"process-aware-web-programming-with-jolie-arxiv":{"peerReviewedVersion":"journals\/scp\/Montesi16","year":"2014","abstract":"We extend the Jolie programming language to capture the native modelling of\nprocess-aware web information systems, i.e., web information systems based upon\nthe execution of business processes. Our main contribution is to offer a\nunifying approach for the programming of distributed architectures on the web,\nwhich can capture web servers, stateful process execution, and the composition\nof services via mediation. We discuss applications of this approach through a\nseries of examples that cover, e.g., static content serving, multiparty\nsessions, and the evolution of web systems. Finally, we present a performance\nevaluation that includes a comparison of Jolie-based web systems to other\nframeworks and a measurement of its scalability.","collection":{"title":"2014"},"type":"article","title":"Process-aware web programming with Jolie","path":"process-aware-web-programming-with-jolie-arxiv","pdf":"m14","where":"In CoRR abs\/1410.3712","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1410.3712"},"id":100,"bibtex":"@article{DBLP:journals\/corr\/Montesi14,\n  author       = {Fabrizio Montesi},\n  title        = {Process-aware web programming with Jolie},\n  journal      = {CoRR},\n  volume       = {abs\/1410.3712},\n  year         = {2014},\n  url          = {http:\/\/arxiv.org\/abs\/1410.3712},\n  eprinttype    = {arXiv},\n  eprint       = {1410.3712},\n  timestamp    = {Mon, 13 Aug 2018 16:48:18 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/Montesi14.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/Montesi14","authors":{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}},"functional-choreographic-programming":{"year":"2022","abstract":"<p>Choreographic programming is an emerging programming paradigm for concurrent and distributed systems, where developers write the communications that should be enacted and a compiler then automatically generates a distributed implementation.<\/p><p>Currently, the most advanced incarnation of the paradigm is Choral, an object-oriented choreographic programming language that targets Java. Choral deviated significantly from known theories of choreographies, and in particular introduced the possibility of expressing higher-order choreographies that are fully distributed.<\/p><p>In this article, we introduce Chorλ, the first functional choreographic programming language. It is also the first theory that explains the core ideas of higher-order choreographic programming. We show that bridging the gap between practice and theory requires developing a new evaluation strategy and typing discipline for λ terms that accounts for the distributed nature of computation in choreographies.<\/p>","collection":{"title":"2022"},"type":"inproceedings","title":"Functional Choreographic Programming","path":"functional-choreographic-programming","pdf":"cglmp22","where":"In proceedings of ICTAC 2022, pp. 212-237","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-031-17715-6_15"},"id":21,"bibtex":"@inproceedings{DBLP:conf\/ictac\/Cruz-FilipeGLMP22,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Eva Graversen and\n                  Lovro Lugovic and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  editor       = {Helmut Seidl and\n                  Zhiming Liu and\n                  Corina S. Pasareanu},\n  title        = {Functional Choreographic Programming},\n  booktitle    = {Theoretical Aspects of Computing - {ICTAC} 2022 - 19th International\n                  Colloquium, Tbilisi, Georgia, September 27-29, 2022, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {13572},\n  pages        = {212--237},\n  publisher    = {Springer},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-031-17715-6\\_15},\n  doi          = {10.1007\/978-3-031-17715-6\\_15},\n  timestamp    = {Mon, 05 Dec 2022 13:35:50 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/ictac\/Cruz-FilipeGLMP22.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/ictac\/Cruz-FilipeGLMP22","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Eva Graversen","link":"https:\/\/dblp.uni-trier.de\/pid\/199\/2114"},{"last":false,"name":"Lovro Lugovic","link":"https:\/\/dblp.uni-trier.de\/pid\/305\/8036"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.1007\/978-3-031-17715-6_15"},"multiparty-classical-choreographies":{"year":"2018","abstract":"We present Multiparty Classical Choreographies (MCC), a language model where global descriptions of communicating systems (choreographies) implement typed multiparty sessions. Typing is achieved by generalising classical linear logic to judgements that explicitly record parallelism by means of hypersequents. Our approach unifies different lines of work on choreographies and processes with multiparty sessions, as well as their connection to linear logic. Thus, results developed in one context are carried over to the others. Key novelties of MCC include support for server invocation in choreographies, as well as logic-driven compilation of choreographies with replicated processes.","collection":{"title":"2018"},"type":"inproceedings","title":"Multiparty Classical Choreographies","path":"multiparty-classical-choreographies","pdf":"ccmm18","where":"In proceedings of LOPSTR 2018, pp. 59-76","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-030-13838-7_4"},"id":51,"bibtex":"@inproceedings{DBLP:conf\/lopstr\/CarboneCMM18,\n  author       = {Marco Carbone and\n                  Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Agata Murawska},\n  editor       = {Fred Mesnard and\n                  Peter J. Stuckey},\n  title        = {Multiparty Classical Choreographies},\n  booktitle    = {Logic-Based Program Synthesis and Transformation - 28th International\n                  Symposium, {LOPSTR} 2018, Frankfurt\/Main, Germany, September 4-6,\n                  2018, Revised Selected Papers},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {11408},\n  pages        = {59--76},\n  publisher    = {Springer},\n  year         = {2018},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-030-13838-7\\_4},\n  doi          = {10.1007\/978-3-030-13838-7\\_4},\n  timestamp    = {Wed, 25 Sep 2019 18:04:29 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/lopstr\/CarboneCMM18.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/lopstr\/CarboneCMM18","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Agata Murawska","link":"https:\/\/dblp.uni-trier.de\/pid\/161\/5948"}],"doi":"10.1007\/978-3-030-13838-7_4"},"choreographies-meet-communication-failures-arxiv":{"year":"2017","abstract":"Choreographies are global descriptions of communication structures, inspired\nby the \"Alice and Bob\" notation of security protocols. They have been\nsuccessfully employed in the design and implementation of distributed systems.\nHowever, there is still limited evidence of the applicability of choreographies\nin the real-world setting of distributed programming, where communication\nactions may fail. In this work, we propose the first choreography model that\nallows for communication failures and the programming of user-defined code to\ndeal with such failures. We validate our model by implementing common\nstrategies for handling communication failures in a robust way, which in turn\ncan be used as a library by choreographies that assume reliable communication.\nWe equip our model with a typing discipline that can statically verify\nreliability properties, in particular at-most-once and exactly-once delivery.\nWe demonstrate the applicability of our model by defining a\nsemantics-preserving compilation procedure towards a process calculus equipped\nwith unreliable I\/O actions.","collection":{"title":"2017"},"title":"Choreographies meet Communication Failures","type":"article","path":"choreographies-meet-communication-failures-arxiv","where":"In CoRR abs\/1712.05465","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1712.05465"},"id":73,"bibtex":"@article{DBLP:journals\/corr\/abs-1712-05465,\n  author       = {Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Choreographies meet Communication Failures},\n  journal      = {CoRR},\n  volume       = {abs\/1712.05465},\n  year         = {2017},\n  url          = {http:\/\/arxiv.org\/abs\/1712.05465},\n  eprinttype    = {arXiv},\n  eprint       = {1712.05465},\n  timestamp    = {Mon, 13 Aug 2018 16:47:38 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1712-05465.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1712-05465","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"reasoning-about-choreographic-programs-arxiv":{"peerReviewedVersion":"conf\/coordination\/Cruz-FilipeGMP23","year":"2023","abstract":"Choreographic programming is a paradigm where a concurrent or distributed\nsystem is developed in a top-down fashion. Programs, called choreographies,\ndetail the desired interactions between processes, and can be compiled to\ndistributed implementations based on message passing. Choreographic languages\nusually guarantee deadlock-freedom and provide an operational correspondence\nbetween choreographies and their compiled implementations, but until now little\nwork has been done on verifying other properties.\n  This paper presents a Hoare-style logic for reasoning about the behaviour of\nchoreographies, and illustrate its usage in representative examples. We show\nthat this logic is sound and complete, and discuss decidability of its\njudgements. Using existing results from choreographic programming, we show that\nany functional correctness property proven for a choreography also holds for\nits compiled implementation.","collection":{"title":"2023"},"type":"article","title":"Reasoning about Choreographic Programs","path":"reasoning-about-choreographic-programs-arxiv","where":"In CoRR abs\/2304.14539","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.48550\/arXiv.2304.14539"},"id":17,"bibtex":"@article{DBLP:journals\/corr\/abs-2304-14539,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Eva Graversen and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Reasoning about Choreographic Programs},\n  journal      = {CoRR},\n  volume       = {abs\/2304.14539},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.48550\/arXiv.2304.14539},\n  doi          = {10.48550\/arXiv.2304.14539},\n  eprinttype    = {arXiv},\n  eprint       = {2304.14539},\n  timestamp    = {Thu, 04 May 2023 15:47:42 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2304-14539.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2304-14539","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Eva Graversen","link":"https:\/\/dblp.uni-trier.de\/pid\/199\/2114"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.48550\/arXiv.2304.14539"},"ephemeral-data-handling-in-microservices-arxiv":{"year":"2019","abstract":"In modern application areas for software systems --- like eHealth, the\nInternet-of-Things, and Edge Computing --- data is encoded in heterogeneous,\ntree-shaped data-formats, it must be processed in real-time, and it must be\nephemeral, i.e., not persist in the system. While it is preferable to use a\nquery language to express complex data-handling logic, their typical execution\nengine, a database external from the main application, is unfit in scenarios of\nephemeral data-handling. A better option is represented by integrated query\nframeworks, which benefit from existing development support tools (e.g., syntax\nand type checkers) and execute within the application memory. In this paper, we\npropose one such framework that, for the first time, targets tree-shaped,\ndocument-oriented queries. We formalise an instantiation of MQuery, a sound\nvariant of the widely-used MongoDB query language, which we implemented in the\nJolie language. Jolie programs are microservices, the building blocks of modern\nsoftware systems. Moreover, since Jolie supports native tree data-structures\nand automatic management of heterogeneous data-encodings, we can provide a\nuniform way to use MQuery on any data-format supported by the language. We\npresent a non-trivial use case from eHealth, use it to concretely evaluate our\nmodel, and to illustrate our formalism.","collection":{"title":"2019"},"title":"Ephemeral Data Handling in Microservices - Technical Report","type":"article","path":"ephemeral-data-handling-in-microservices-arxiv","where":"In CoRR abs\/1904.11327","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1904.11327"},"id":47,"bibtex":"@article{DBLP:journals\/corr\/abs-1904-11327,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Larisa Safina and\n                  Stefano Pio Zingaro},\n  title        = {Ephemeral Data Handling in Microservices - Technical Report},\n  journal      = {CoRR},\n  volume       = {abs\/1904.11327},\n  year         = {2019},\n  url          = {http:\/\/arxiv.org\/abs\/1904.11327},\n  eprinttype    = {arXiv},\n  eprint       = {1904.11327},\n  timestamp    = {Sat, 23 Jan 2021 01:11:27 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1904-11327.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1904-11327","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"},{"last":true,"name":"Stefano Pio Zingaro","link":"https:\/\/dblp.uni-trier.de\/pid\/220\/4883"}]},"jolie-a-java-orchestration-engine-interpreter-engine":{"year":"2006","abstract":"Service oriented computing is an emerging paradigm for programming distributed applications based on services. Services are simple software elements that supply their functionalities by exhibiting their interfaces and that can be invoked by exploiting simple communication primitives. The emerging mechanism exploited in service oriented computing for composing services \u2013 in order to provide more complex functionalities \u2013 is by means of orchestrators. An orchestrator is able to invoke and coordinate other services by exploiting typical workflow patterns such as parallel composition, sequencing and choices. Examples of orchestration languages are XLANG [5] and WS-BPEL [7]. In this paper we present JOLIE, an interpreter and engine for orchestration programs. The main novelties of JOLIE are that it provides an easy to use development environment (because it supports a more programmer friendly C\/Java-like syntax instead of an XML-based syntax) and it is based on a solid mathematical underlying model (developed in previous works of the authors [2,3,4]).","collection":{"title":"2006"},"type":"inproceedings","title":"JOLIE: a Java Orchestration Language Interpreter Engine","path":"jolie-a-java-orchestration-engine-interpreter-engine","pdf":"mglz07","where":"In proceedings of CoOrg\/MTCoord@COORDINATION 2006, pp. 19-33","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q59702043"},"id":119,"bibtex":"@inproceedings{DBLP:journals\/entcs\/MontesiGLZ07,\n  author       = {Fabrizio Montesi and\n                  Claudio Guidi and\n                  Roberto Lucchi and\n                  Gianluigi Zavattaro},\n  editor       = {Guido Boella and\n                  Mehdi Dastani and\n                  Andrea Omicini and\n                  Leon van der Torre and\n                  Ivana Cern{\\'{a}} and\n                  Isabelle Linden},\n  title        = {{JOLIE:} a Java Orchestration Language Interpreter Engine},\n  booktitle    = {Combined Proceedings of the Second International Workshop on Coordination\n                  and Organization (CoOrg 2006) and the Second International Workshop\n                  on Methods and Tools for Coordinating Concurrent, Distributed and\n                  Mobile Systems (MTCoord 2006), Bologna, Italy, June 13, 2006},\n  series       = {Electronic Notes in Theoretical Computer Science},\n  volume       = {181},\n  pages        = {19--33},\n  publisher    = {Elsevier},\n  year         = {2006},\n  url          = {https:\/\/doi.org\/10.1016\/j.entcs.2007.01.051},\n  doi          = {10.1016\/j.entcs.2007.01.051},\n  timestamp    = {Tue, 24 Jan 2023 13:41:41 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/entcs\/MontesiGLZ07.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/entcs\/MontesiGLZ07","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Roberto Lucchi","link":"https:\/\/dblp.uni-trier.de\/pid\/69\/3593"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}]},"encoding-asynchrony-in-choreographies":{"year":"2017","abstract":"Choreographies are widely used both for the specification and the programming of concurrent and distributed software architectures. Since many of such architectures use asynchronous communications, it is essential to understand how the behaviour described in a choreography can be correctly implemented in asynchronous settings. So far, this problem has been addressed by relying on additional technical machinery, such as ad-hoc syntactic terms, semantics, or equivalences. In this work, we show that such extensions are not needed for choreography languages that support primitives for process spawning and name mobility. Instead, we can just encode asynchronous communications in choreographies themselves, yielding a simpler approach.","collection":{"title":"2017"},"type":"inproceedings","title":"Encoding asynchrony in choreographies","path":"encoding-asynchrony-in-choreographies","pdf":"cm17_sac","where":"In proceedings of SAC 2017, pp. 1175-1177","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1145\/3019612.3019901"},"id":66,"bibtex":"@inproceedings{DBLP:conf\/sac\/Cruz-FilipeM17,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  editor       = {Ahmed Seffah and\n                  Birgit Penzenstadler and\n                  Carina Alves and\n                  Xin Peng},\n  title        = {Encoding asynchrony in choreographies},\n  booktitle    = {Proceedings of the Symposium on Applied Computing, {SAC} 2017, Marrakech,\n                  Morocco, April 3-7, 2017},\n  pages        = {1175--1177},\n  publisher    = {{ACM}},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.1145\/3019612.3019901},\n  doi          = {10.1145\/3019612.3019901},\n  timestamp    = {Wed, 01 Feb 2023 17:58:48 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/sac\/Cruz-FilipeM17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/sac\/Cruz-FilipeM17","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1145\/3019612.3019901"},"a-framework-for-rule-based-dynamic-adaptation":{"year":"2010","abstract":"We propose a new approach to dynamic adaptation, based on the combination of adaptation hooks provided by the adaptable application specifying where adaptation can happen, and adaptation rules external to the application, specifying when and how adaptation can be performed. We discuss different design choices that have to be considered when using such an approach, and then we propose a possible solution. We describe the solution in details, we apply it to a sample scenario and we implement it on top of the language Jolie.","collection":{"title":"2010"},"type":"inproceedings","title":"A Framework for Rule-Based Dynamic Adaptation","path":"a-framework-for-rule-based-dynamic-adaptation","pdf":"lbm10","where":"In proceedings of TGC 2010, pp. 284-300","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-642-15640-3_19"},"id":112,"bibtex":"@inproceedings{DBLP:conf\/tgc\/LaneseBM10,\n  author       = {Ivan Lanese and\n                  Antonio Bucchiarone and\n                  Fabrizio Montesi},\n  editor       = {Martin Wirsing and\n                  Martin Hofmann and\n                  Axel Rauschmayer},\n  title        = {A Framework for Rule-Based Dynamic Adaptation},\n  booktitle    = {Trustworthly Global Computing - 5th International Symposium, {TGC}\n                  2010, Munich, Germany, February 24-26, 2010, Revised Selected Papers},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {6084},\n  pages        = {284--300},\n  publisher    = {Springer},\n  year         = {2010},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-642-15640-3\\_19},\n  doi          = {10.1007\/978-3-642-15640-3\\_19},\n  timestamp    = {Tue, 14 May 2019 10:00:52 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/tgc\/LaneseBM10.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/tgc\/LaneseBM10","authors":[{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Antonio Bucchiarone","link":"https:\/\/dblp.uni-trier.de\/pid\/78\/616"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-642-15640-3_19"},"procedural-choreographic-programming":{"year":"2017","abstract":"Choreographic Programming is an emerging paradigm for correct-by-construction concurrent programming. However, its applicability is limited by the current lack of support for reusable procedures. We propose Procedural Choreographies (PC), a choreographic language model with full procedural abstraction. PC includes unbounded process creation and name mobility, yielding a powerful framework for writing correct concurrent algorithms that can be compiled into a process calculus. This increased expressivity requires a typing discipline to ensure that processes are properly connected when enacting procedures.","collection":{"title":"2017"},"type":"inproceedings","title":"Procedural Choreographic Programming","path":"procedural-choreographic-programming","pdf":"cm17-forte","where":"In proceedings of FORTE 2017, pp. 92-107","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-60225-7_7"},"id":63,"bibtex":"@inproceedings{DBLP:conf\/forte\/Cruz-FilipeM17,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  editor       = {Ahmed Bouajjani and\n                  Alexandra Silva},\n  title        = {Procedural Choreographic Programming},\n  booktitle    = {Formal Techniques for Distributed Objects, Components, and Systems\n                  - 37th {IFIP} {WG} 6.1 International Conference, {FORTE} 2017, Held\n                  as Part of the 12th International Federated Conference on Distributed\n                  Computing Techniques, DisCoTec 2017, Neuch{\\^{a}}tel, Switzerland,\n                  June 19-22, 2017, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {10321},\n  pages        = {92--107},\n  publisher    = {Springer},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-60225-7\\_7},\n  doi          = {10.1007\/978-3-319-60225-7\\_7},\n  timestamp    = {Wed, 25 Sep 2019 18:07:00 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/forte\/Cruz-FilipeM17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/forte\/Cruz-FilipeM17","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-319-60225-7_7"},"now-it-compiles-certified-automatic-repair-of-uncompilable-protocols-arxiv":{"year":"2023","abstract":"Choreographic programming is a paradigm where developers write the global\nspecification (called choreography) of a communicating system, and then a\ncorrect-by-construction distributed implementation is compiled automatically.\nUnfortunately, it is possible to write choreographies that cannot be compiled,\nbecause of issues related to an agreement property known as knowledge of\nchoice. This forces programmers to reason manually about implementation details\nthat may be orthogonal to the protocol that they are writing.\n  Amendment is an automatic procedure for repairing uncompilable\nchoreographies. We present a formalisation of amendment from the literature,\nbuilt upon an existing formalisation of choreographic programming. However, in\nthe process of formalising the expected properties of this procedure, we\ndiscovered a subtle counterexample that invalidates the original published and\npeer-reviewed pen-and-paper theory. We discuss how using a theorem prover led\nus to both finding the issue, and stating and proving a correct formulation of\nthe properties of amendment.","collection":{"title":"2023"},"type":"article","title":"Now It Compiles! Certified Automatic Repair of Uncompilable Protocols","path":"now-it-compiles-certified-automatic-repair-of-uncompilable-protocols-arxiv","pdf":"cm23-arxiv","where":"In CoRR abs\/2302.14622","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.48550\/arXiv.2302.14622"},"id":13,"bibtex":"@article{DBLP:journals\/corr\/abs-2302-14622,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  title        = {Now It Compiles! Certified Automatic Repair of Uncompilable Protocols},\n  journal      = {CoRR},\n  volume       = {abs\/2302.14622},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.48550\/arXiv.2302.14622},\n  doi          = {10.48550\/arXiv.2302.14622},\n  eprinttype    = {arXiv},\n  eprint       = {2302.14622},\n  timestamp    = {Thu, 02 Mar 2023 10:23:33 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2302-14622.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2302-14622","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.48550\/arXiv.2302.14622"},"better-late-than-never":{"year":"2019","abstract":"<jats:p>We present Hypersequent Classical Processes (HCP), a revised interpretation of the \u201CProofs as Processes\u201D correspondence between linear logic and the π-calculus initially proposed by Abramsky [1994], and later developed by Bellin and Scott [1994], Caires and Pfenning [2010], and Wadler [2014], among others. HCP mends the discrepancies between linear logic and the syntax and observable semantics of parallel composition in the π-calculus, by conservatively extending linear logic to hyperenvironments (collections of environments, inspired by the hypersequents by Avron [1991]). Separation of environments in hyperenvironments is internalised by ⊗ and corresponds to parallel process behaviour. Thanks to this property, for the first time we are able to extract a labelled transition system (lts) semantics from proof rewritings. Leveraging the information on parallelism at the level of types, we obtain a logical reconstruction of the delayed actions that Merro and Sangiorgi [2004] formulated to model non-blocking I\/O in the π-calculus. We define a denotational semantics for processes based on Brzozowski derivatives, and uncover that non-interference in HCP corresponds to Fubini\u2019s theorem of double antiderivation. Having an lts allows us to validate HCP using the standard toolbox of behavioural theory. We instantiate bisimilarity and barbed congruence for HCP, and obtain a full abstraction result: bisimilarity, denotational equivalence, and barbed congruence coincide.<\/jats:p>","collection":{"title":"2019"},"type":"article","title":"Better late than never: a fully-abstract semantics for classical processes","path":"better-late-than-never","pdf":"kmp19","where":"In Proc. ACM Program. Lang. 3","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1145\/3290337"},"id":43,"bibtex":"@article{DBLP:journals\/pacmpl\/KokkeMP19,\n  author       = {Wen Kokke and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Better late than never: a fully-abstract semantics for classical processes},\n  journal      = {Proc. {ACM} Program. Lang.},\n  volume       = {3},\n  number       = {{POPL}},\n  pages        = {24:1--24:29},\n  year         = {2019},\n  url          = {https:\/\/doi.org\/10.1145\/3290337},\n  doi          = {10.1145\/3290337},\n  timestamp    = {Wed, 17 Feb 2021 08:54:04 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/pacmpl\/KokkeMP19.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/pacmpl\/KokkeMP19","authors":[{"last":false,"name":"Wen Kokke","link":"https:\/\/dblp.uni-trier.de\/pid\/206\/7258"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.1145\/3290337"},"introduction-to-choreographies":{"fullView":"\/introduction-to-choreographies\/","notes":[{"text":"ISBN (Print): 9781108833769"},{"text":"ISBN (Online): 9781108981491"}],"year":"2023","abstract":"In concurrent and distributed systems, processes can complete tasks together by playing their parts in a joint plan. The plan, or protocol, can be written as a choreography: a formal description of overall behaviour that processes should collaborate to implement, like authenticating a user or purchasing an item online. Formality brings clarity, but not only that. Choreographies can contribute to important safety and liveness properties. This book is an ideal introduction to theory of choreographies for students, researchers, and professionals in computer science and applied mathematics. It covers languages for writing choreographies and their semantics, and principles for implementing choreographies correctly. The text treats the study of choreographies as a discipline in its own right, following a systematic approach that starts from simple foundations and proceeds to more advanced features in incremental steps. Each chapter includes examples and exercises aimed at helping with understanding the theory and its relation to practice.","collection":{"title":"Highlights"},"title":"Introduction to Choreographies","type":"book","path":"introduction-to-choreographies","where":"Cambridge University Press","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1017\/9781108981491"},"id":0,"bibtex":"@book{M23,\r\n  place={Cambridge},\r\n  title={Introduction to Choreographies},\r\n  publisher={Cambridge University Press},\r\n  author={Montesi, Fabrizio},\r\n  year={2023}\r\n}","key":"M23","authors":{"last":true,"name":"Fabrizio Montesi"}},"sliceable-monolith-arxiv":{"peerReviewedVersion":"conf\/IEEEscc\/MontesiPP21","year":"2021","abstract":"We propose Sliceable Monolith, a new methodology for developing microservice\narchitectures and perform their integration testing by leveraging most of the\nsimplicity of a monolith: a single codebase and a local execution environment\nthat simulates distribution. Then, a tool compiles a codebase for each\nmicroservice and a cloud deployment configuration. The key enabler of our\napproach is the technology-agnostic service definition language offered by\nJolie.","collection":{"title":"2021"},"type":"article","title":"Sliceable Monolith: Monolith First, Microservices Later","path":"sliceable-monolith-arxiv","where":"In CoRR abs\/2103.09518","links":{"last":true,"name":"arxiv.org","href":"https:\/\/arxiv.org\/abs\/2103.09518"},"id":35,"bibtex":"@article{DBLP:journals\/corr\/abs-2103-09518,\n  author       = {Fabrizio Montesi and\n                  Marco Peressotti and\n                  Valentino Picotti},\n  title        = {Sliceable Monolith: Monolith First, Microservices Later},\n  journal      = {CoRR},\n  volume       = {abs\/2103.09518},\n  year         = {2021},\n  url          = {https:\/\/arxiv.org\/abs\/2103.09518},\n  eprinttype    = {arXiv},\n  eprint       = {2103.09518},\n  timestamp    = {Tue, 23 Mar 2021 16:29:47 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2103-09518.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2103-09518","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":true,"name":"Valentino Picotti","link":"https:\/\/dblp.uni-trier.de\/pid\/287\/9990"}]},"communications-in-choreographies-revisited-arxiv":{"peerReviewedVersion":"conf\/sac\/Cruz-FilipeMP18","year":"2017","abstract":"Choreographic Programming is a paradigm for developing\ncorrect-by-construction concurrent programs, by writing high-level descriptions\nof the desired communications and then synthesising process implementations\nautomatically. So far, choreographic programming has been explored in the\nmonadic setting: interaction terms express point-to-point communications of a\nsingle value. However, real-world systems often rely on interactions of\npolyadic nature, where multiple values are communicated among two or more\nparties, like multicast, scatter-gather, and atomic exchanges. We introduce a\nnew model for choreographic programming equipped with a primitive for grouped\ninteractions that subsumes all the above scenarios. Intuitively, grouped\ninteractions can be thought of as being carried out as one single interaction.\nIn practice, they are implemented by processes that carry them out in a\nconcurrent fashion. After formalising the intuitive semantics of grouped\ninteractions, we prove that choreographic programs and their implementations\nare correct and deadlock-free by construction.","collection":{"title":"2017"},"type":"article","title":"Communications in Choreographies, Revisited","path":"communications-in-choreographies-revisited-arxiv","where":"In CoRR abs\/1711.10201","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1711.10201"},"id":72,"bibtex":"@article{DBLP:journals\/corr\/abs-1711-10201,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Communications in Choreographies, Revisited},\n  journal      = {CoRR},\n  volume       = {abs\/1711.10201},\n  year         = {2017},\n  url          = {http:\/\/arxiv.org\/abs\/1711.10201},\n  eprinttype    = {arXiv},\n  eprint       = {1711.10201},\n  timestamp    = {Mon, 13 Aug 2018 16:46:53 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1711-10201.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1711-10201","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"certified-compilation-of-choreographies-with-hacc":{"year":"2023","abstract":"<p>Programming communicating processes is challenging, because it requires writing separate programs that perform compatible send and receive actions at the right time during execution. Leaving this task to the programmer can easily lead to bugs. Choreographic programming addresses this challenge by equipping developers with high-level abstractions for codifying the desired communication structures from a global viewpoint. Given a choreography, implementations of the involved processes can be automatically generated by endpoint projection (EPP).<\/p><p>While choreographic programming prevents manual mistakes in the implementation of communications, the correctness of a choreographic programming framework crucially hinges on the correctness of its complex compiler, which has motivated formalisation of theories of choreographic programming in theorem provers. In this paper, we build upon one of these formalisations to construct a toolchain that produces executable code from a choreography.<\/p>","collection":{"title":"2023"},"type":"inproceedings","title":"Certified Compilation of Choreographies with hacc","path":"certified-compilation-of-choreographies-with-hacc","pdf":"clm23","where":"In proceedings of FORTE 2023, pp. 29-36","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-031-35355-0_3"},"id":10,"bibtex":"@inproceedings{DBLP:conf\/forte\/Cruz-FilipeLM23,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Lovro Lugovic and\n                  Fabrizio Montesi},\n  editor       = {Marieke Huisman and\n                  Ant{\\'{o}}nio Ravara},\n  title        = {Certified Compilation of Choreographies with hacc},\n  booktitle    = {Formal Techniques for Distributed Objects, Components, and Systems\n                  - 43rd {IFIP} {WG} 6.1 International Conference, {FORTE} 2023, Held\n                  as Part of the 18th International Federated Conference on Distributed\n                  Computing Techniques, DisCoTec 2023, Lisbon, Portugal, June 19-23,\n                  2023, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {13910},\n  pages        = {29--36},\n  publisher    = {Springer},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-031-35355-0\\_3},\n  doi          = {10.1007\/978-3-031-35355-0\\_3},\n  timestamp    = {Fri, 07 Jul 2023 23:30:53 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/forte\/Cruz-FilipeLM23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/forte\/Cruz-FilipeLM23","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Lovro Lugovic","link":"https:\/\/dblp.uni-trier.de\/pid\/305\/8036"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-031-35355-0_3"},"dynamic-error-handling-in-service-oriented-applications":{"year":"2009","abstract":"Service Oriented Computing (SOC) allows for the composition of services which communicate using unidirectional one-way or bidirectional request-response communication patterns. Most service orchestration languages proposed so far provide also primitives for error handling based on fault, termination, and compensation handlers. Our work is motivated by the difficulties encountered in programming some error handling strategies using current error handling primitives. We propose as a solution an orchestration programming style in which handlers are dynamically installed. We assess our proposal by formalizing our approach as an extension of the process calculus SOCK and by proving that our formalization satisfies some expected high-level properties.","collection":{"title":"2009"},"type":"article","title":"Dynamic Error Handling in Service Oriented Applications","path":"dynamic-error-handling-in-service-oriented-applications","pdf":"glmz09","where":"In Fundam. Informaticae 95","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.3233\/FI-2009-143"},"id":113,"bibtex":"@article{DBLP:journals\/fuin\/GuidiLMZ09,\n  author       = {Claudio Guidi and\n                  Ivan Lanese and\n                  Fabrizio Montesi and\n                  Gianluigi Zavattaro},\n  title        = {Dynamic Error Handling in Service Oriented Applications},\n  journal      = {Fundam. Informaticae},\n  volume       = {95},\n  number       = {1},\n  pages        = {73--102},\n  year         = {2009},\n  url          = {https:\/\/doi.org\/10.3233\/FI-2009-143},\n  doi          = {10.3233\/FI-2009-143},\n  timestamp    = {Fri, 18 Sep 2020 11:16:17 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/fuin\/GuidiLMZ09.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/fuin\/GuidiLMZ09","authors":[{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}],"doi":"10.3233\/FI-2009-143"},"model-driven-generation-of-microservice-interfaces-arxiv":{"peerReviewedVersion":"conf\/coordination\/GiallorenzoMPR22","year":"2022","abstract":"We formally define and implement a translation from domain models in the\nLEMMA modelling framework to microservice APIs in the Jolie programming\nlanguage. Our tool enables a software development process whereby microservice\narchitectures can first be designed with the leading method of Domain-Driven\nDesign, and then corresponding data types and service interfaces (APIs) in\nJolie are automatically generated. Developers can extend and use these APIs as\nguides in order to produce compliant implementations. Our tool thus contributes\nto enhancing productivity and improving the design adherence of microservices.","collection":{"title":"2022"},"type":"article","title":"Model-Driven Generation of Microservice Interfaces: From LEMMA Domain Models to Jolie APIs","path":"model-driven-generation-of-microservice-interfaces-arxiv","where":"In CoRR abs\/2202.11397","links":{"last":true,"name":"arxiv.org","href":"https:\/\/arxiv.org\/abs\/2202.11397"},"id":24,"bibtex":"@article{DBLP:journals\/corr\/abs-2202-11397,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Florian Rademacher},\n  title        = {Model-Driven Generation of Microservice Interfaces: From {LEMMA} Domain\n                  Models to Jolie APIs},\n  journal      = {CoRR},\n  volume       = {abs\/2202.11397},\n  year         = {2022},\n  url          = {https:\/\/arxiv.org\/abs\/2202.11397},\n  eprinttype    = {arXiv},\n  eprint       = {2202.11397},\n  timestamp    = {Wed, 02 Mar 2022 16:35:04 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2202-11397.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2202-11397","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":true,"name":"Florian Rademacher","link":"https:\/\/dblp.uni-trier.de\/pid\/167\/5000"}]},"merging-multiparty-protocols-in-multiparty-choreographies-arxiv":{"year":"2012","abstract":"Choreography-based programming is a powerful paradigm for defining\ncommunication-based systems from a global viewpoint. A choreography can be\nchecked against multiparty protocol specifications, given as behavioural types,\nthat may be instantiated indefinitely at runtime. Each protocol instance is\nstarted with a synchronisation among the involved peers.\n  We analyse a simple transformation from a choreography with a possibly\nunbounded number of protocol instantiations to a choreography instantiating a\nsingle protocol, which is the merge of the original ones. This gives an\neffective methodology for obtaining new protocols by composing existing ones.\nMoreover, by removing all synchronisations required for starting protocol\ninstances, our transformation reduces the number of communications and\nresources needed to execute a choreography.","collection":{"title":"2012"},"type":"inproceedings","title":"Merging Multiparty Protocols in Multiparty Choreographies","path":"merging-multiparty-protocols-in-multiparty-choreographies-arxiv","pdf":"mc11","where":"In proceedings of PLACES 2012, pp. 21-27","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1302.6331"},"id":107,"bibtex":"@inproceedings{DBLP:journals\/corr\/abs-1302-6331,\n  author       = {Marco Carbone and\n                  Fabrizio Montesi},\n  editor       = {Simon J. Gay and\n                  Paul Kelly},\n  title        = {Merging Multiparty Protocols in Multiparty Choreographies},\n  booktitle    = {Proceedings Fifth Workshop on Programming Language Approaches to Concurrency-\n                  and Communication-cEntric Software, {PLACES} 2012, Tallinn, Estonia,\n                  31 March 2012},\n  series       = {{EPTCS}},\n  volume       = {109},\n  pages        = {21--27},\n  year         = {2012},\n  url          = {https:\/\/doi.org\/10.4204\/EPTCS.109.4},\n  doi          = {10.4204\/EPTCS.109.4},\n  timestamp    = {Wed, 12 Sep 2018 01:05:15 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1302-6331.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1302-6331","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"proceedings-microservices-2017-2019":{"year":"2020","abstract":"Joint Post-proceedings of the First and Second International Conference on Microservices, Microservices 2017\/2019.","collection":{"title":"2020"},"type":"proceedings","title":"Joint Post-proceedings of the First and Second International Conference on Microservices, Microservices 2017\/2019, October 23-27, 2017, Odense, Denmark \/ February 19-21, 2019, Dortmund, Germany","path":"proceedings-microservices-2017-2019","pdf":"cgmprs19","where":"Schloss Dagstuhl - Leibniz-Zentrum für Informatik, OASIcs, Vol. 78","links":{"last":true,"name":"dagstuhl.de","href":"https:\/\/www.dagstuhl.de\/dagpub\/978-3-95977-137-5"},"id":41,"bibtex":"@proceedings{DBLP:conf\/microservices\/2019,\n  editor       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Florian Rademacher and\n                  Sabine Sachweh},\n  title        = {Joint Post-proceedings of the First and Second International Conference\n                  on Microservices, Microservices 2017\/2019, October 23-27, 2017, Odense,\n                  Denmark \/ February 19-21, 2019, Dortmund, Germany},\n  series       = {OASIcs},\n  volume       = {78},\n  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\n  year         = {2020},\n  url          = {https:\/\/www.dagstuhl.de\/dagpub\/978-3-95977-137-5},\n  isbn         = {978-3-95977-137-5},\n  timestamp    = {Mon, 21 Dec 2020 13:23:22 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/microservices\/2019.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/microservices\/2019","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":false,"name":"Florian Rademacher","link":"https:\/\/dblp.uni-trier.de\/pid\/167\/5000"},{"last":true,"name":"Sabine Sachweh","link":"https:\/\/dblp.uni-trier.de\/pid\/19\/669"}]},"multiparty-session-types-as-coherence-proofs":{"year":"2015","abstract":"We propose a Curry-Howard correspondence between a language for programming multiparty sessions and a generalisation of Classical Linear Logic (CLL). In this framework, propositions correspond to the local behaviour of a participant in a multiparty session type, proofs to processes, and proof normalisation to executing communications. Our key contribution is generalising duality, from CLL, to a new notion of n-ary compatibility, called coherence. Building on coherence as a principle of compositionality, we generalise the cut rule of CLL to a new rule for composing many processes communicating in a multiparty session. We prove the soundness of our model by showing the admissibility of our new rule, which entails deadlock-freedom via our correspondence.","collection":{"title":"2015"},"type":"inproceedings","title":"Multiparty Session Types as Coherence Proofs","path":"multiparty-session-types-as-coherence-proofs","pdf":"cmsy15","where":"In proceedings of CONCUR 2015, pp. 412-426","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.4230\/LIPIcs.CONCUR.2015.412"},"id":90,"bibtex":"@inproceedings{DBLP:conf\/concur\/CarboneMSY15,\n  author       = {Marco Carbone and\n                  Fabrizio Montesi and\n                  Carsten Sch{\\\"{u}}rmann and\n                  Nobuko Yoshida},\n  editor       = {Luca Aceto and\n                  David de Frutos{-}Escrig},\n  title        = {Multiparty Session Types as Coherence Proofs},\n  booktitle    = {26th International Conference on Concurrency Theory, {CONCUR} 2015,\n                  Madrid, Spain, September 1.4, 2015},\n  series       = {LIPIcs},\n  volume       = {42},\n  pages        = {412--426},\n  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\n  year         = {2015},\n  url          = {https:\/\/doi.org\/10.4230\/LIPIcs.CONCUR.2015.412},\n  doi          = {10.4230\/LIPIcs.CONCUR.2015.412},\n  timestamp    = {Fri, 27 Mar 2020 08:51:56 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/concur\/CarboneMSY15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/concur\/CarboneMSY15","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Carsten Schürmann","link":"https:\/\/dblp.uni-trier.de\/pid\/07\/4034"},{"last":true,"name":"Nobuko Yoshida","link":"https:\/\/dblp.uni-trier.de\/pid\/29\/3650"}],"doi":"10.4230\/LIPIcs.CONCUR.2015.412"},"certifying-choreography-compilation":{"year":"2021","abstract":"<p>Choreographic programming is a paradigm for developing concurrent and distributed systems, where programs are choreographies that define, from a global viewpoint, the computations and interactions that communicating processes should enact. Choreography compilation translates choreographies into the local definitions of process behaviours, given as terms in a process calculus.<\/p><p>Proving choreography compilation correct is challenging and error-prone, because it requires relating languages in different paradigms (global interactions vs local actions) and dealing with a combinatorial explosion of proof cases. We present the first certified program for choreography compilation for a nontrivial choreographic language supporting recursion.<\/p>","collection":{"title":"2021"},"type":"inproceedings","title":"Certifying Choreography Compilation","path":"certifying-choreography-compilation","pdf":"cmp21b","where":"In proceedings of ICTAC 2021, pp. 115-133","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-030-85315-0_8"},"id":31,"bibtex":"@inproceedings{DBLP:conf\/ictac\/Cruz-FilipeMP21,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  editor       = {Antonio Cerone and\n                  Peter Csaba {\\\"{O}}lveczky},\n  title        = {Certifying Choreography Compilation},\n  booktitle    = {Theoretical Aspects of Computing - {ICTAC} 2021 - 18th International\n                  Colloquium, Virtual Event, Nur-Sultan, Kazakhstan, September 8-10,\n                  2021, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {12819},\n  pages        = {115--133},\n  publisher    = {Springer},\n  year         = {2021},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-030-85315-0\\_8},\n  doi          = {10.1007\/978-3-030-85315-0\\_8},\n  timestamp    = {Wed, 01 Sep 2021 12:53:43 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/ictac\/Cruz-FilipeMP21.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/ictac\/Cruz-FilipeMP21","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.1007\/978-3-030-85315-0_8"},"choreographies-computationally-arxiv":{"peerReviewedVersion":"journals\/tcs\/Cruz-FilipeM20","year":"2015","abstract":"Choreographic Programming is a programming paradigm for building concurrent\nprograms that are deadlock-free by construction, as a result of programming\ncommunications declaratively and then synthesising process implementations\nautomatically. Despite strong interest on choreographies, a foundational model\nthat explains which computations can be performed with the hallmark constructs\nof choreographies is still missing.\n  In this work, we introduce Core Choreographies (CC), a model that includes\nonly the core primitives of choreographic programming. Every computable\nfunction can be implemented as a choreography in CC, from which we can\nsynthesise a process implementation where independent computations run in\nparallel. We discuss the design of CC and argue that it constitutes a canonical\nmodel for choreographic programming.","collection":{"title":"2015"},"type":"article","title":"Choreographies, Computationally","path":"choreographies-computationally-arxiv","pdf":"cm15","where":"In CoRR abs\/1510.03271","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1510.03271"},"id":93,"bibtex":"@article{DBLP:journals\/corr\/Cruz-FilipeM15,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  title        = {Choreographies, Computationally},\n  journal      = {CoRR},\n  volume       = {abs\/1510.03271},\n  year         = {2015},\n  url          = {http:\/\/arxiv.org\/abs\/1510.03271},\n  eprinttype    = {arXiv},\n  eprint       = {1510.03271},\n  timestamp    = {Mon, 13 Aug 2018 16:48:39 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/Cruz-FilipeM15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/Cruz-FilipeM15","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"the-paths-to-choreography-extraction-arxiv":{"peerReviewedVersion":"conf\/fossacs\/Cruz-FilipeLM17","year":"2016","abstract":"Choreographies are global descriptions of interactions among concurrent\ncomponents, most notably used in the settings of verification (e.g., Multiparty\nSession Types) and synthesis of correct-by-construction software (Choreographic\nProgramming). They require a top-down approach: programmers first write\nchoreographies, and then use them to verify or synthesize their programs.\nHowever, most existing software does not come with choreographies yet, which\nprevents their application.\n  To attack this problem, we propose a novel methodology (called choreography\nextraction) that, given a set of programs or protocol specifications,\nautomatically constructs a choreography that describes their behavior. The key\nto our extraction is identifying a set of paths in a graph that represents the\nsymbolic execution of the programs of interest. Our method improves on previous\nwork in several directions: we can now deal with programs that are equipped\nwith a state and internal computation capabilities; time complexity is\ndramatically better; we capture programs that are correct but not necessarily\nsynchronizable, i.e., they work because they exploit asynchronous\ncommunication.","collection":{"title":"2016"},"type":"article","title":"The Paths to Choreography Extraction","path":"the-paths-to-choreography-extraction-arxiv","where":"In CoRR abs\/1610.10050","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1610.10050"},"id":86,"bibtex":"@article{DBLP:journals\/corr\/Cruz-FilipeLM16,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Kim S. Larsen and\n                  Fabrizio Montesi},\n  title        = {The Paths to Choreography Extraction},\n  journal      = {CoRR},\n  volume       = {abs\/1610.10050},\n  year         = {2016},\n  url          = {http:\/\/arxiv.org\/abs\/1610.10050},\n  eprinttype    = {arXiv},\n  eprint       = {1610.10050},\n  timestamp    = {Mon, 13 Aug 2018 16:47:44 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/Cruz-FilipeLM16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/Cruz-FilipeLM16","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Kim S. Larsen","link":"https:\/\/dblp.uni-trier.de\/pid\/l\/KimSLarsen"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"self-reconfiguring-microservices":{"year":"2016","abstract":"Microservices is an emerging paradigm for the development of distributed systems that, originating from Service-Oriented Architecture, focuses on the small dimension, the loose coupling, and the dynamic topology of services. Microservices are particularly appropriate for the development of distributed systems in the Cloud. However, their dynamic nature calls for suitable techniques for their automatic deployment. In this paper we address this problem and we propose JRO (Jolie Redeployment Optimiser), a tool for the automatic and optimised deployment of microservices written in the Jolie language. The tool uses Zephyrus, a state of the art tool that automatically generates a fully detailed ServiceOriented Architecture configuration starting from a partial and abstract description of the target application.","collection":{"title":"2016"},"type":"inproceedings","title":"Self-Reconfiguring Microservices","path":"self-reconfiguring-microservices","pdf":"gggmm16","where":"In proceedings of Theory and Practice of Formal Methods 2016, pp. 194-210","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q62043669"},"id":77,"bibtex":"@inproceedings{DBLP:conf\/birthday\/GabbrielliGGMM16,\n  author       = {Maurizio Gabbrielli and\n                  Saverio Giallorenzo and\n                  Claudio Guidi and\n                  Jacopo Mauro and\n                  Fabrizio Montesi},\n  editor       = {Erika {\\'{A}}brah{\\'{a}}m and\n                  Marcello M. Bonsangue and\n                  Einar Broch Johnsen},\n  title        = {Self-Reconfiguring Microservices},\n  booktitle    = {Theory and Practice of Formal Methods - Essays Dedicated to Frank\n                  de Boer on the Occasion of His 60th Birthday},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {9660},\n  pages        = {194--210},\n  publisher    = {Springer},\n  year         = {2016},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-30734-3\\_14},\n  doi          = {10.1007\/978-3-319-30734-3\\_14},\n  timestamp    = {Sat, 09 Apr 2022 12:46:09 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/birthday\/GabbrielliGGMM16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/birthday\/GabbrielliGGMM16","authors":[{"last":false,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Jacopo Mauro","link":"https:\/\/dblp.uni-trier.de\/pid\/53\/1605"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"error-handling-from-theory-to-practice":{"year":"2010","abstract":"We describe the different issues that a language designer has to tackle when defining error handling mechanisms for service-oriented computing. We first discuss the issues that have to be considered when developing error handling mechanisms inside a process calculus, i.e. an abstract model. We then analyze how these issues change when moving from a process calculus to a full-fledged language based on it. We consider as an example the language Jolie, and the calculus SOCK it is based upon.","collection":{"title":"2010"},"type":"inproceedings","title":"Error Handling: From Theory to Practice","path":"error-handling-from-theory-to-practice","pdf":"lm10","where":"In proceedings of ISoLA (2) 2010, pp. 66-81","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-642-16561-0_13"},"id":110,"bibtex":"@inproceedings{DBLP:conf\/isola\/LaneseM10,\n  author       = {Ivan Lanese and\n                  Fabrizio Montesi},\n  editor       = {Tiziana Margaria and\n                  Bernhard Steffen},\n  title        = {Error Handling: From Theory to Practice},\n  booktitle    = {Leveraging Applications of Formal Methods, Verification, and Validation\n                  - 4th International Symposium on Leveraging Applications, ISoLA 2010,\n                  Heraklion, Crete, Greece, October 18-21, 2010, Proceedings, Part {II}},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {6416},\n  pages        = {66--81},\n  publisher    = {Springer},\n  year         = {2010},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-642-16561-0\\_13},\n  doi          = {10.1007\/978-3-642-16561-0\\_13},\n  timestamp    = {Sun, 02 Jun 2019 21:11:27 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/isola\/LaneseM10.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/isola\/LaneseM10","authors":[{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-642-16561-0_13"},"coherence-generalises-duality":{"year":"2016","abstract":"Wadler introduced Classical Processes (CP), a calculus based on a propositions-as-types correspondence between propositions of classical linear logic and session types. Carbone et al. introduced Multiparty Classical Processes, a calculus that generalises CP to multiparty session types, by replacing the duality of classical linear logic (relating two types) with a more general notion of coherence (relating an arbitrary number of types). This paper introduces variants of CP and MCP, plus a new intermediate calculus of Globally-governed Classical Processes (GCP). We show a tight relation between these three calculi, giving semantics-preserving translations from GCP to CP and from MCP to GCP. The translation from GCP to CP interprets a coherence proof as an arbiter process that mediates communications in a session, while MCP adds annotations that permit processes to communicate directly without centralised control.","collection":{"title":"2016"},"type":"inproceedings","title":"Coherence Generalises Duality: A Logical Explanation of Multiparty Session Types","path":"coherence-generalises-duality","pdf":"clmsw16","where":"In proceedings of CONCUR 2016, pp. 33:1-33:15","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.4230\/LIPIcs.CONCUR.2016.33"},"id":78,"bibtex":"@inproceedings{DBLP:conf\/concur\/CarboneLMSW16,\n  author       = {Marco Carbone and\n                  Sam Lindley and\n                  Fabrizio Montesi and\n                  Carsten Sch{\\\"{u}}rmann and\n                  Philip Wadler},\n  editor       = {Jos{\\'{e}}e Desharnais and\n                  Radha Jagadeesan},\n  title        = {Coherence Generalises Duality: {A} Logical Explanation of Multiparty\n                  Session Types},\n  booktitle    = {27th International Conference on Concurrency Theory, {CONCUR} 2016,\n                  August 23-26, 2016, Qu{\\'{e}}bec City, Canada},\n  series       = {LIPIcs},\n  volume       = {59},\n  pages        = {33:1--33:15},\n  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\n  year         = {2016},\n  url          = {https:\/\/doi.org\/10.4230\/LIPIcs.CONCUR.2016.33},\n  doi          = {10.4230\/LIPIcs.CONCUR.2016.33},\n  timestamp    = {Sat, 30 Sep 2023 09:37:42 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/concur\/CarboneLMSW16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/concur\/CarboneLMSW16","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Sam Lindley","link":"https:\/\/dblp.uni-trier.de\/pid\/97\/4946"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Carsten Schürmann","link":"https:\/\/dblp.uni-trier.de\/pid\/07\/4034"},{"last":true,"name":"Philip Wadler","link":"https:\/\/dblp.uni-trier.de\/pid\/w\/PhilipWadler"}],"doi":"10.4230\/LIPIcs.CONCUR.2016.33"},"proceedings-esocc-2022":{"year":"2022","abstract":"Proceedings of the 9th IFIP WG 6.12 European Conference on Service-Oriented and Cloud Computing (ESOCC).","collection":{"title":"2022"},"type":"proceedings","title":"Service-Oriented and Cloud Computing - 9th IFIP WG 6.12 European Conference, ESOCC 2022, Wittenberg, Germany, March 22-24, 2022, Proceedings","path":"proceedings-esocc-2022","where":"Springer, Lecture Notes in Computer Science, Vol. 13226","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-031-04718-3"},"id":23,"bibtex":"@proceedings{DBLP:conf\/esocc\/2022,\n  editor       = {Fabrizio Montesi and\n                  George Angelos Papadopoulos and\n                  Wolf Zimmermann},\n  title        = {Service-Oriented and Cloud Computing - 9th {IFIP} {WG} 6.12 European\n                  Conference, {ESOCC} 2022, Wittenberg, Germany, March 22-24, 2022,\n                  Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {13226},\n  publisher    = {Springer},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-031-04718-3},\n  doi          = {10.1007\/978-3-031-04718-3},\n  isbn         = {978-3-031-04717-6},\n  timestamp    = {Wed, 20 Apr 2022 16:20:41 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/esocc\/2022.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/esocc\/2022","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"George Angelos Papadopoulos","link":"https:\/\/dblp.uni-trier.de\/pid\/p\/GeorgeAngelosPapadopoulos"},{"last":true,"name":"Wolf Zimmermann","link":"https:\/\/dblp.uni-trier.de\/pid\/z\/WolfZimmermann"}],"doi":"10.1007\/978-3-031-04718-3"},"from-infinity-to-choreographies-arxiv":{"peerReviewedVersion":"conf\/lopstr\/KjaerCM22","year":"2022","abstract":"Choreographies are formal descriptions of distributed systems, which focus on\nthe way in which participants communicate. While they are useful for analysing\nprotocols, in practice systems are written directly by specifying each\nparticipant's behaviour. This created the need for choreography extraction: the\nprocess of obtaining a choreography that faithfully describes the collective\nbehaviour of all participants in a distributed protocol.\n  Previous works have addressed this problem for systems with a predefined,\nfinite number of participants. In this work, we show how to extract\nchoreographies from system descriptions where the total number of participants\nis unknown and unbounded, due to the ability of spawning new processes at\nruntime. This extension is challenging, since previous algorithms relied\nheavily on the set of possible states of the network during execution being\nfinite.","collection":{"title":"2022"},"type":"article","title":"From Infinity to Choreographies: Extraction for Unbounded Systems","path":"from-infinity-to-choreographies-arxiv","where":"In CoRR abs\/2207.08884","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.48550\/arXiv.2207.08884"},"id":26,"bibtex":"@article{DBLP:journals\/corr\/abs-2207-08884,\n  author       = {Bj{\\o}rn Angel Kj{\\ae}r and\n                  Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  title        = {From Infinity to Choreographies: Extraction for Unbounded Systems},\n  journal      = {CoRR},\n  volume       = {abs\/2207.08884},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.48550\/arXiv.2207.08884},\n  doi          = {10.48550\/arXiv.2207.08884},\n  eprinttype    = {arXiv},\n  eprint       = {2207.08884},\n  timestamp    = {Mon, 25 Jul 2022 14:56:58 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2207-08884.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2207-08884","authors":[{"last":false,"name":"Bjørn Angel Kjær","link":"https:\/\/dblp.uni-trier.de\/pid\/324\/7924"},{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.48550\/arXiv.2207.08884"},"microservices-a-language-based-approach":{"year":"2017","abstract":"Microservices is an emerging development paradigm where software is obtained by composing autonomous entities, called (micro)services. However, microservice systems are currently developed using general-purpose programming languages that do not provide dedicated abstractions for service composition. Instead, current practice is focused on the deployment aspects of microservices, in particular by using containerization. In this chapter, we make the case for a languagebased approach to the engineering of microservice architectures, which we believe is complementary to current practice. We discuss the approach in general, and then we instantiate it in terms of the Jolie programming language.","collection":{"title":"2017"},"type":"incollection","title":"Microservices: A Language-Based Approach","path":"microservices-a-language-based-approach","pdf":"glmm17","where":"Book chapter in Present and Ulterior Software Engineering, pp. 217-225","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-67425-4_13"},"id":69,"bibtex":"@incollection{DBLP:books\/sp\/17\/GuidiLMM17,\n  author       = {Claudio Guidi and\n                  Ivan Lanese and\n                  Manuel Mazzara and\n                  Fabrizio Montesi},\n  editor       = {Manuel Mazzara and\n                  Bertrand Meyer},\n  title        = {Microservices: {A} Language-Based Approach},\n  booktitle    = {Present and Ulterior Software Engineering},\n  pages        = {217--225},\n  publisher    = {Springer},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-67425-4\\_13},\n  doi          = {10.1007\/978-3-319-67425-4\\_13},\n  timestamp    = {Sun, 25 Oct 2020 22:32:23 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/books\/sp\/17\/GuidiLMM17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"books\/sp\/17\/GuidiLMM17","authors":[{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-319-67425-4_13"},"from-the-decorator-pattern-to-circuit-breakers-in-microservices":{"year":"2018","abstract":"We analyse different deployment setups for circuit breaker, a design pattern for preventing cascading failures by guarding calls towards a target service. Then, we define a unifying implementation strategy in the setting of microservices, by using the Jolie programming language. Our implementation captures all setups with a single program, by interpreting a circuit breaker as a decorator that is generic on the interface of its target service.","collection":{"title":"2018"},"type":"inproceedings","title":"From the decorator pattern to circuit breakers in microservices","path":"from-the-decorator-pattern-to-circuit-breakers-in-microservices","pdf":"mw18","where":"In proceedings of SAC 2018, pp. 1733-1735","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1145\/3167132.3167427"},"id":53,"bibtex":"@inproceedings{DBLP:conf\/sac\/MontesiW18,\n  author       = {Fabrizio Montesi and\n                  Janine Weber},\n  editor       = {Hisham M. Haddad and\n                  Roger L. Wainwright and\n                  Richard Chbeir},\n  title        = {From the decorator pattern to circuit breakers in microservices},\n  booktitle    = {Proceedings of the 33rd Annual {ACM} Symposium on Applied Computing,\n                  {SAC} 2018, Pau, France, April 09-13, 2018},\n  pages        = {1733--1735},\n  publisher    = {{ACM}},\n  year         = {2018},\n  url          = {https:\/\/doi.org\/10.1145\/3167132.3167427},\n  doi          = {10.1145\/3167132.3167427},\n  timestamp    = {Wed, 25 Sep 2019 18:12:13 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/sac\/MontesiW18.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/sac\/MontesiW18","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Janine Weber","link":"https:\/\/dblp.uni-trier.de\/pid\/186\/7899"}],"doi":"10.1145\/3167132.3167427"},"choreographies-as-objects-arxiv":{"year":"2020","abstract":"We present Choral, the first language for programming choreographies\n(multiparty protocols) that builds on top of mainstream programming\nabstractions: in Choral, choreographies are objects. Given a choreography that\ndefines interactions among some roles (Alice, Bob, etc.), an implementation for\neach role in the choreography is automatically generated by a compiler. These\nimplementations are libraries in pure Java, which developers can modularly\ncompose in their own programs to participate correctly in choreographies.","collection":{"title":"2020"},"type":"article","title":"Choreographies as Objects","path":"choreographies-as-objects-arxiv","pdf":"gmp20","where":"In CoRR abs\/2005.09520","links":{"last":true,"name":"arxiv.org","href":"https:\/\/arxiv.org\/abs\/2005.09520"},"id":42,"bibtex":"@article{DBLP:journals\/corr\/abs-2005-09520,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Choreographies as Objects},\n  journal      = {CoRR},\n  volume       = {abs\/2005.09520},\n  year         = {2020},\n  url          = {https:\/\/arxiv.org\/abs\/2005.09520},\n  eprinttype    = {arXiv},\n  eprint       = {2005.09520},\n  timestamp    = {Fri, 22 May 2020 16:21:28 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2005-09520.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2005-09520","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"process-aware-web-programming-with-jolie-journal":{"year":"2016","abstract":"We extend the Jolie programming language to capture the native modelling of processaware web information systems, i.e., web information systems based upon the execution of business processes. Our main contribution is to offer a unifying approach for the programming of distributed architectures on the web, which can capture web servers, stateful process execution, and the composition of services via mediation. We discuss applications of this approach through a series of examples that cover, e.g., static content serving, multiparty sessions, and the evolution of web systems. Finally, we present a performance evaluation that includes a comparison of Jolie-based web systems to other frameworks and a measurement of its scalability","collection":{"title":"2016"},"type":"article","title":"Process-aware web programming with Jolie","path":"process-aware-web-programming-with-jolie-journal","pdf":"m16","where":"In Sci. Comput. Program. 130","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q59702053"},"id":75,"bibtex":"@article{DBLP:journals\/scp\/Montesi16,\n  author       = {Fabrizio Montesi},\n  title        = {Process-aware web programming with Jolie},\n  journal      = {Sci. Comput. Program.},\n  volume       = {130},\n  pages        = {69--96},\n  year         = {2016},\n  url          = {https:\/\/doi.org\/10.1016\/j.scico.2016.05.002},\n  doi          = {10.1016\/j.scico.2016.05.002},\n  timestamp    = {Wed, 17 Feb 2021 21:56:01 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/scp\/Montesi16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/scp\/Montesi16","authors":{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}},"on-asynchrony-and-choreographies-arxiv":{"year":"2017","abstract":"Choreographic Programming is a paradigm for the development of concurrent\nsoftware, where deadlocks are prevented syntactically. However, choreography\nlanguages are typically synchronous, whereas many real-world systems have\nasynchronous communications. Previous attempts at enriching choreographies with\nasynchrony rely on ad-hoc constructions, whose adequacy is only argued\ninformally. In this work, we formalise the properties that an asynchronous\nsemantics for choreographies should have: messages can be sent without the\nintended receiver being ready, and all sent messages are eventually received.\nWe explore how out-of-order execution, used in choreographies for modelling\nconcurrency, can be exploited to endow choreographies with an asynchronous\nsemantics. Our approach satisfies the properties we identified. We show how our\ndevelopment yields a pleasant correspondence with FIFO-based asynchronous\nmessaging, modelled in a process calculus, and discuss how it can be adopted in\nmore complex choreography models.","collection":{"title":"2017"},"type":"inproceedings","title":"On Asynchrony and Choreographies","path":"on-asynchrony-and-choreographies-arxiv","pdf":"cm17-ice","where":"In proceedings of ICE@DisCoTec 2017, pp. 76-90","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1711.11211"},"id":67,"bibtex":"@inproceedings{DBLP:journals\/corr\/abs-1711-11211,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  editor       = {Massimo Bartoletti and\n                  Laura Bocchi and\n                  Ludovic Henrio and\n                  Sophia Knight},\n  title        = {On Asynchrony and Choreographies},\n  booktitle    = {Proceedings 10th Interaction and Concurrency Experience, ICE@DisCoTec\n                  2017, Neuch{\\^{a}}tel, Switzerland, 21-22nd June 2017},\n  series       = {{EPTCS}},\n  volume       = {261},\n  pages        = {76--90},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.4204\/EPTCS.261.8},\n  doi          = {10.4204\/EPTCS.261.8},\n  timestamp    = {Wed, 25 Sep 2019 17:52:38 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1711-11211.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1711-11211","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"no-more-no-less":{"year":"2019","abstract":"<p>Serverless computing, also known as Functions-as-a-Service, is a recent paradigm aimed at simplifying the programming of cloud applications. The idea is that developers design applications in terms of functions, which are then deployed on a cloud infrastructure. The infrastructure takes care of executing the functions whenever requested by remote clients, dealing automatically with distribution and scaling with respect to inbound traffic.<\/p><p>While vendors already support a variety of programming languages for serverless computing (e.g. Go, Java, Javascript, Python), as far as we know there is no reference model yet to formally reason on this paradigm. In this paper, we propose the first core formal programming model for serverless computing, which combines ideas from both the λ-calculus (for functions) and the π-calculus (for communication). To illustrate our proposal, we model a real-world serverless system. Thanks to our model, we capture limitations of current vendors and formalise possible amendments.<\/p>","collection":{"title":"2019"},"type":"inproceedings","title":"No More, No Less - A Formal Model for Serverless Computing","path":"no-more-no-less","pdf":"gglmpz19","where":"In proceedings of COORDINATION 2019, pp. 148-157","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-030-22397-7_9"},"id":45,"bibtex":"@inproceedings{DBLP:conf\/coordination\/GabbrielliGLMPZ19,\n  author       = {Maurizio Gabbrielli and\n                  Saverio Giallorenzo and\n                  Ivan Lanese and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Stefano Pio Zingaro},\n  editor       = {Hanne Riis Nielson and\n                  Emilio Tuosto},\n  title        = {No More, No Less - {A} Formal Model for Serverless Computing},\n  booktitle    = {Coordination Models and Languages - 21st {IFIP} {WG} 6.1 International\n                  Conference, {COORDINATION} 2019, Held as Part of the 14th International\n                  Federated Conference on Distributed Computing Techniques, DisCoTec\n                  2019, Kongens Lyngby, Denmark, June 17-21, 2019, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {11533},\n  pages        = {148--157},\n  publisher    = {Springer},\n  year         = {2019},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-030-22397-7\\_9},\n  doi          = {10.1007\/978-3-030-22397-7\\_9},\n  timestamp    = {Sat, 09 Apr 2022 12:35:33 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/coordination\/GabbrielliGLMPZ19.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/coordination\/GabbrielliGLMPZ19","authors":[{"last":false,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":true,"name":"Stefano Pio Zingaro","link":"https:\/\/dblp.uni-trier.de\/pid\/220\/4883"}],"doi":"10.1007\/978-3-030-22397-7_9"},"microservices-yesterday-today-and-tomorrow":{"year":"2017","abstract":"Microservices is an architectural style inspired by service-oriented computing that has recently gaining popularity. Before presenting the current state-of-the-art in the field, this chapter reviews the history of software architecture, the reasons that led to the diffusion of objects and services first, and microservices later. Finally, open problems and future challenges are introduced. This survey primarily addresses newcomers to the discipline, while offering an academic viewpoint on the topic. In addition, we investigate some practical issues and point out some potential solutions.","collection":{"title":"2017"},"type":"incollection","title":"Microservices: Yesterday, Today, and Tomorrow","path":"microservices-yesterday-today-and-tomorrow","pdf":"dglmmms17","where":"Book chapter in Present and Ulterior Software Engineering, pp. 195-216","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q54479360"},"id":68,"bibtex":"@incollection{DBLP:books\/sp\/17\/DragoniGLMMMS17,\n  author       = {Nicola Dragoni and\n                  Saverio Giallorenzo and\n                  Alberto Lluch{-}Lafuente and\n                  Manuel Mazzara and\n                  Fabrizio Montesi and\n                  Ruslan Mustafin and\n                  Larisa Safina},\n  editor       = {Manuel Mazzara and\n                  Bertrand Meyer},\n  title        = {Microservices: Yesterday, Today, and Tomorrow},\n  booktitle    = {Present and Ulterior Software Engineering},\n  pages        = {195--216},\n  publisher    = {Springer},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-67425-4\\_12},\n  doi          = {10.1007\/978-3-319-67425-4\\_12},\n  timestamp    = {Sun, 25 Oct 2020 22:32:23 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/books\/sp\/17\/DragoniGLMMMS17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"books\/sp\/17\/DragoniGLMMMS17","authors":[{"last":false,"name":"Nicola Dragoni","link":"https:\/\/dblp.uni-trier.de\/pid\/85\/3106"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Alberto Lluch-Lafuente","link":"https:\/\/dblp.uni-trier.de\/pid\/l\/AlbertoLluchLafuente"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Ruslan Mustafin","link":"https:\/\/dblp.uni-trier.de\/pid\/182\/2521"},{"last":true,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"}]},"deadlock-freedom-by-design":{"year":"2013","abstract":"Over the last decade, global descriptions have been successfully employed for the verification and implementation of communicating systems, respectively as protocol specifications and choreographies. In this work, we bring these two practices together by proposing a purely-global programming model. We show a novel interpretation of asynchrony and parallelism in a global setting and develop a typing discipline that verifies choreographies against protocol specifications, based on multiparty sessions. Exploiting the nature of global descriptions, our type system defines a new class of deadlock-free concurrent systems (deadlock-freedom-bydesign), provides type inference, and supports session mobility. We give a notion of Endpoint Projection (EPP) which generates correct entity code (as π-calculus terms) from a choreography. Finally, we evaluate our approach by providing a prototype implementation for a concrete programming language and by applying it to some examples from multicore and service-oriented programming.","collection":{"title":"2013"},"type":"inproceedings","title":"Deadlock-freedom-by-design: multiparty asynchronous global programming","path":"deadlock-freedom-by-design","pdf":"cm13","where":"In proceedings of POPL 2013, pp. 263-274","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q59702062"},"id":102,"bibtex":"@inproceedings{DBLP:conf\/popl\/CarboneM13,\n  author       = {Marco Carbone and\n                  Fabrizio Montesi},\n  editor       = {Roberto Giacobazzi and\n                  Radhia Cousot},\n  title        = {Deadlock-freedom-by-design: multiparty asynchronous global programming},\n  booktitle    = {The 40th Annual {ACM} {SIGPLAN-SIGACT} Symposium on Principles of\n                  Programming Languages, {POPL} '13, Rome, Italy - January 23 - 25,\n                  2013},\n  pages        = {263--274},\n  publisher    = {{ACM}},\n  year         = {2013},\n  url          = {https:\/\/doi.org\/10.1145\/2429069.2429101},\n  doi          = {10.1145\/2429069.2429101},\n  timestamp    = {Thu, 24 Jun 2021 16:19:31 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/popl\/CarboneM13.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/popl\/CarboneM13","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"a-core-model-for-choreographic-programming":{"year":"2016","abstract":"<p>Choreographic Programming is a paradigm for developing concurrent programs that are deadlock-free by construction, by programming communications declaratively and then synthesising process implementations automatically. Despite strong interest on choreographies, a foundational model that explains which computations can be performed with the hallmark constructs of choreographies is still missing.<\/p><p>In this work, we introduce Core Choreographies (CC), a model that includes only the core primitives of choreographic programming. Every computable function can be implemented as a choreography in CC, from which we can synthesise a process implementation where independent computations run in parallel. We discuss the design of CC and argue that it constitutes a canonical model for choreographic programming.<\/p>","collection":{"title":"2016"},"type":"inproceedings","title":"A Core Model for Choreographic Programming","path":"a-core-model-for-choreographic-programming","pdf":"cm16_facs","where":"In proceedings of FACS 2016, pp. 17-35","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-57666-4_3"},"id":79,"bibtex":"@inproceedings{DBLP:conf\/facs2\/Cruz-FilipeM16,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  editor       = {Olga Kouchnarenko and\n                  Ramtin Khosravi},\n  title        = {A Core Model for Choreographic Programming},\n  booktitle    = {Formal Aspects of Component Software - 13th International Conference,\n                  {FACS} 2016, Besan{\\c{c}}on, France, October 19-21, 2016, Revised\n                  Selected Papers},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {10231},\n  pages        = {17--35},\n  year         = {2016},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-57666-4\\_3},\n  doi          = {10.1007\/978-3-319-57666-4\\_3},\n  timestamp    = {Wed, 25 Sep 2019 18:10:28 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/facs2\/Cruz-FilipeM16.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/facs2\/Cruz-FilipeM16","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-319-57666-4_3"},"composing-services-with-jolie":{"year":"2007","abstract":"Dynamic fault handling is a new approach for dealing with fault management in service-oriented applications. Fault handlers, termination handlers and compensation handlers are installed at execution time instead of being statically defined. In this paper we present this programming style and our implementation of dynamic fault handling in JOLIE, providing finally a nontrivial example of its usage.","collection":{"title":"2007"},"type":"inproceedings","title":"Composing Services with JOLIE","path":"composing-services-with-jolie","pdf":"mgz07","where":"In proceedings of ECOWS 2007, pp. 13-22","links":{"last":true,"name":"doi.ieeecomputersociety.org","href":"https:\/\/doi.ieeecomputersociety.org\/10.1109\/ECOWS.2007.19"},"id":118,"bibtex":"@inproceedings{DBLP:conf\/ecows\/MontesiGZ07,\n  author       = {Fabrizio Montesi and\n                  Claudio Guidi and\n                  Gianluigi Zavattaro},\n  title        = {Composing Services with {JOLIE}},\n  booktitle    = {Fifth {IEEE} European Conference on Web Services {(ECOWS} 2007), 26-28\n                  November 2007, Halle (Saale), Germany},\n  pages        = {13--22},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2007},\n  url          = {https:\/\/doi.org\/10.1109\/ECOWS.2007.19},\n  doi          = {10.1109\/ECOWS.2007.19},\n  timestamp    = {Thu, 23 Mar 2023 23:59:53 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/ecows\/MontesiGZ07.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/ecows\/MontesiGZ07","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}]},"μxl":{"year":"2023","abstract":"Lead generation refers to the identification of potential topics (the 'leads') of importance for journalists to report on. In this paper we present a new lead generation tool based on a microservice architecture, which includes a component of explainable AI. The lead generation tool collects and stores historical and real-time data from a web source, like Google Trends, and generates current and future leads. These leads are produced by an engine for hypothetical reasoning based on logical rules, which is a novel implementation of a recent theory. Finally, the leads are displayed on a web interface for end users, in particular journalists. This interface provides information on why a specific topic is or may become a lead, assisting journalists in deciding where to focus their attention. We carry out an empirical evaluation of the performance of our tool.","collection":{"title":"2023"},"type":"inproceedings","title":"μXL: Explainable Lead Generation with Microservices and Hypothetical Answers","path":"μxl","pdf":"ckmv23","where":"In proceedings of ESOCC 2023, pp. 3-18","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-031-46235-1_1"},"id":9,"bibtex":"@inproceedings{DBLP:conf\/esocc\/CruzFilipeKMV23,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Sofia Kostopoulou and\n                  Fabrizio Montesi and\n                  Jonas Vistrup},\n  editor       = {George A. Papadopoulos and\n                  Florian Rademacher and\n                  Jacopo Soldani},\n  title        = {{\\(\\mu\\)}XL: Explainable Lead Generation with Microservices and Hypothetical\n                  Answers},\n  booktitle    = {Service-Oriented and Cloud Computing - 10th {IFIP} {WG} 6.12 European\n                  Conference, {ESOCC} 2023, Larnaca, Cyprus, October 24-25, 2023, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {14183},\n  pages        = {3--18},\n  publisher    = {Springer},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-031-46235-1\\_1},\n  doi          = {10.1007\/978-3-031-46235-1\\_1},\n  timestamp    = {Mon, 16 Oct 2023 19:47:08 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/esocc\/CruzFilipeKMV23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/esocc\/CruzFilipeKMV23","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Sofia Kostopoulou","link":"https:\/\/dblp.uni-trier.de\/pid\/358\/3301"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Jonas Vistrup","link":"https:\/\/dblp.uni-trier.de\/pid\/358\/3293"}],"doi":"10.1007\/978-3-031-46235-1_1"},"amending-choreographies-arxiv":{"year":"2013","abstract":"Choreographies are global descriptions of system behaviors, from which the\nlocal behavior of each endpoint entity can be obtained automatically through\nprojection. To guarantee that its projection is correct, i.e. it has the same\nbehaviors of the original choreography, a choreography usually has to respect\nsome coherency conditions. This restricts the set of choreographies that can be\nprojected.\n  In this paper, we present a transformation for amending choreographies that\ndo not respect common syntactic conditions for projection correctness.\nSpecifically, our transformation automatically reduces the amount of\nconcurrency, and it infers and adds hidden communications that make the\nresulting choreography respect the desired conditions, while preserving its\nbehavior.","collection":{"title":"2013"},"type":"inproceedings","title":"Amending Choreographies","path":"amending-choreographies-arxiv","pdf":"lmz13","where":"In proceedings of WWV 2013, pp. 34-48","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1308.0390"},"id":104,"bibtex":"@inproceedings{DBLP:journals\/corr\/LaneseMZ13,\n  author       = {Ivan Lanese and\n                  Fabrizio Montesi and\n                  Gianluigi Zavattaro},\n  editor       = {Ant{\\'{o}}nio Ravara and\n                  Josep Silva},\n  title        = {Amending Choreographies},\n  booktitle    = {Proceedings 9th International Workshop on Automated Specification\n                  and Verification of Web Systems, {WWV} 2013, Florence, Italy, 6th\n                  June 2013},\n  series       = {{EPTCS}},\n  volume       = {123},\n  pages        = {34--48},\n  year         = {2013},\n  url          = {https:\/\/doi.org\/10.4204\/EPTCS.123.5},\n  doi          = {10.4204\/EPTCS.123.5},\n  timestamp    = {Wed, 12 Sep 2018 01:05:16 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/LaneseMZ13.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/LaneseMZ13","authors":[{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}]},"classical-higher-order-processes":{"year":"2017","abstract":"Classical Processes (CP) is a calculus where the proof theory of classical linear logic types processes `a la π-calculus, building on a Curry-Howard correspondence between session types and linear propositions. We contribute to this research line by extending CP with process mobility, inspired by the Higher-Order π-calculus. The key to our calculus is that sequents are asymmetric: one side types sessions as in CP and the other types process variables, which can be instantiated with process values. The controlled interaction between the two sides ensures that process variables can be used at will, but always respecting the linear usage of sessions expected by the environment.","collection":{"title":"2017"},"type":"inproceedings","title":"Classical Higher-Order Processes - (Short Paper)","path":"classical-higher-order-processes","pdf":"m17_forte","where":"In proceedings of FORTE 2017, pp. 171-178","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-60225-7_12"},"id":64,"bibtex":"@inproceedings{DBLP:conf\/forte\/Montesi17,\n  author       = {Fabrizio Montesi},\n  editor       = {Ahmed Bouajjani and\n                  Alexandra Silva},\n  title        = {Classical Higher-Order Processes - (Short Paper)},\n  booktitle    = {Formal Techniques for Distributed Objects, Components, and Systems\n                  - 37th {IFIP} {WG} 6.1 International Conference, {FORTE} 2017, Held\n                  as Part of the 12th International Federated Conference on Distributed\n                  Computing Techniques, DisCoTec 2017, Neuch{\\^{a}}tel, Switzerland,\n                  June 19-22, 2017, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {10321},\n  pages        = {171--178},\n  publisher    = {Springer},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-60225-7\\_12},\n  doi          = {10.1007\/978-3-319-60225-7\\_12},\n  timestamp    = {Wed, 25 Sep 2019 18:07:00 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/forte\/Montesi17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/forte\/Montesi17","authors":{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},"doi":"10.1007\/978-3-319-60225-7_12"},"data-driven-workflows-for-microservices-arxiv":{"peerReviewedVersion":"conf\/aina\/SafinaMMR16","year":"2015","abstract":"Microservices is an architectural style inspired by service-oriented\ncomputing that has recently started gaining popularity. Jolie is a programming\nlanguage based on the microservices paradigm: the main building block of Jolie\nsystems are services, in contrast to, e.g., functions or objects. The\nprimitives offered by the Jolie language elicit many of the recurring patterns\nfound in microservices, like load balancers and structured processes. However,\nJolie still lacks some useful constructs for dealing with message types and\ndata manipulation that are present in service-oriented computing. In this\npaper, we focus on the possibility of expressing choices at the level of data\ntypes, a feature well represented in standards for Web Services, e.g., WSDL. We\nextend Jolie to support such type choices and show the impact of our\nimplementation on some of the typical scenarios found in microservice systems.\nThis shows how computation can move from a process-driven to a data-driven\napproach, and leads to the preliminary identification of recurring\ncommunication patterns that can be shaped as design patterns.","collection":{"title":"2015"},"type":"article","title":"Data-driven Workflows for Microservices","path":"data-driven-workflows-for-microservices-arxiv","pdf":"smm15","where":"In CoRR abs\/1511.02597","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1511.02597"},"id":95,"bibtex":"@article{DBLP:journals\/corr\/SafinaMM15,\n  author       = {Larisa Safina and\n                  Manuel Mazzara and\n                  Fabrizio Montesi},\n  title        = {Data-driven Workflows for Microservices},\n  journal      = {CoRR},\n  volume       = {abs\/1511.02597},\n  year         = {2015},\n  url          = {http:\/\/arxiv.org\/abs\/1511.02597},\n  eprinttype    = {arXiv},\n  eprint       = {1511.02597},\n  timestamp    = {Mon, 13 Aug 2018 16:46:04 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/SafinaMM15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/SafinaMM15","authors":[{"last":false,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"},{"last":false,"name":"Manuel Mazzara","link":"https:\/\/dblp.uni-trier.de\/pid\/45\/2295"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"dynamic-fault-handling-mechanisms-for-service-oriented-applications":{"year":"2008","abstract":"Dynamic fault handling is a new approach for dealing with fault management in service-oriented applications. Fault handlers, termination handlers and compensation handlers are installed at execution time instead of being statically defined. In this paper we present this programming style and our implementation of dynamic fault handling in JOLIE, providing finally a nontrivial example of its usage.","collection":{"title":"2008"},"type":"inproceedings","title":"Dynamic Fault Handling Mechanisms for Service-Oriented Applications","path":"dynamic-fault-handling-mechanisms-for-service-oriented-applications","pdf":"mglz08","where":"In proceedings of ECOWS 2008, pp. 225-234","links":{"last":true,"name":"doi.ieeecomputersociety.org","href":"https:\/\/doi.ieeecomputersociety.org\/10.1109\/ECOWS.2008.20"},"id":116,"bibtex":"@inproceedings{DBLP:conf\/ecows\/MontesiGLZ08,\n  author       = {Fabrizio Montesi and\n                  Claudio Guidi and\n                  Ivan Lanese and\n                  Gianluigi Zavattaro},\n  editor       = {Claus Pahl and\n                  Siobh{\\'{a}}n Clarke and\n                  Rik Eshuis},\n  title        = {Dynamic Fault Handling Mechanisms for Service-Oriented Applications},\n  booktitle    = {{ECOWS} 2008, Sixth European Conference on Web Services, 12-14 November\n                  2008, Dublin, Ireland},\n  pages        = {225--234},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2008},\n  url          = {https:\/\/doi.org\/10.1109\/ECOWS.2008.20},\n  doi          = {10.1109\/ECOWS.2008.20},\n  timestamp    = {Thu, 23 Mar 2023 23:59:53 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/ecows\/MontesiGLZ08.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/ecows\/MontesiGLZ08","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}]},"lemma2jolie":{"year":"2023","abstract":"We introduce LEMMA2Jolie, a tool for translating domain models of microservice architectures given in LEMMA into concrete APIs of microservices in the Jolie programming language. Our tool combines the state of the art for the design and implementation of microservices: developers can use Domain-Driven Design (DDD) for the construction of the domain models of a microservice architecture, and then automatically transition to a serviceoriented programming language that provides native linguistic support for implementing the behaviour of each microservice.","collection":{"title":"2023"},"type":"article","title":"LEMMA2Jolie: A tool to generate microservice APIs from domain models","path":"lemma2jolie","pdf":"gmpr23","where":"In Sci. Comput. Program. 228","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1016\/j.scico.2023.102956"},"id":5,"bibtex":"@article{DBLP:journals\/scp\/GiallorenzoMPR23,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Florian Rademacher},\n  title        = {LEMMA2Jolie: {A} tool to generate microservice APIs from domain models},\n  journal      = {Sci. Comput. Program.},\n  volume       = {228},\n  pages        = {102956},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.1016\/j.scico.2023.102956},\n  doi          = {10.1016\/j.scico.2023.102956},\n  timestamp    = {Sun, 06 Aug 2023 20:50:45 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/scp\/GiallorenzoMPR23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/scp\/GiallorenzoMPR23","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":true,"name":"Florian Rademacher","link":"https:\/\/dblp.uni-trier.de\/pid\/167\/5000"}],"doi":"10.1016\/j.scico.2023.102956"},"linear-logic-the-pi-calculus-and-their-metatheory-arxiv":{"year":"2021","abstract":"Initiated by Abramsky [1994], the Proofs as Processes agenda is to establish\na solid foundation for the study of concurrent languages, by researching the\nconnection between linear logic and the $\\pi$-calculus.\n  To date, Proofs as Processes is still a partial success. Caires and Pfenning\n[2010] showed that linear propositions correspond to session types, which\nprescribe the observable behaviour of processes. Further, Carbone et al. [2018]\ndemonstrated that adopting devices from hypersequents [Avron 1991] shapes\nproofs such that they correspond to the expected syntactic structure of\nprocesses in the $\\pi$-calculus. What remains is reconstructing the expected\nmetatheory of session types and the $\\pi$-calculus. In particular, the hallmark\nof session types, session fidelity, still has to be reconstructed: a\ncorrespondence between the observable behaviours of processes and their session\ntypes, in terms of labelled transitions.\n  In this article, we present $\\pi$LL, a new process calculus rooted in linear\nlogic. The key novelty of $\\pi$LL is that it comes with a carefully formulated\ndesign recipe, based on a dialgebraic view of labelled transition systems.\nThanks to our recipe, $\\pi$LL offers the expected transition systems of session\ntypes, which we use to establish session fidelity. We use $\\pi$LL to carry out\nthe first thorough investigation of the metatheoretical properties enforced by\nlinear logic on the observable behaviour of processes, uncovering connections\nwith similarity and bisimilarity. We also prove that $\\pi$LL and our recipe\nform a robust basis for the further exploration of Proofs as Processes, by\nconsidering different features: polymorphism, process mobility, and recursion.","collection":{"title":"2021"},"title":"Linear Logic, the π-calculus, and their Metatheory: A Recipe for Proofs as Processes","type":"article","path":"linear-logic-the-pi-calculus-and-their-metatheory-arxiv","where":"In CoRR abs\/2106.11818","links":{"last":true,"name":"arxiv.org","href":"https:\/\/arxiv.org\/abs\/2106.11818"},"id":37,"bibtex":"@article{DBLP:journals\/corr\/abs-2106-11818,\n  author       = {Fabrizio Montesi and\n                  Marco Peressotti},\n  title        = {Linear Logic, the {\\(\\pi\\)}-calculus, and their Metatheory: {A} Recipe\n                  for Proofs as Processes},\n  journal      = {CoRR},\n  volume       = {abs\/2106.11818},\n  year         = {2021},\n  url          = {https:\/\/arxiv.org\/abs\/2106.11818},\n  eprinttype    = {arXiv},\n  eprint       = {2106.11818},\n  timestamp    = {Wed, 30 Jun 2021 16:14:10 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2106-11818.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2106-11818","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}]},"no-more-no-less-arxiv":{"peerReviewedVersion":"conf\/coordination\/GabbrielliGLMPZ19","year":"2019","abstract":"Serverless computing, also known as Functions-as-a-Service, is a recent\nparadigm aimed at simplifying the programming of cloud applications. The idea\nis that developers design applications in terms of functions, which are then\ndeployed on a cloud infrastructure. The infrastructure takes care of executing\nthe functions whenever requested by remote clients, dealing automatically with\ndistribution and scaling with respect to inbound traffic.\n  While vendors already support a variety of programming languages for\nserverless computing (e.g. Go, Java, Javascript, Python), as far as we know\nthere is no reference model yet to formally reason on this paradigm. In this\npaper, we propose the first formal programming model for serverless computing,\nwhich combines ideas from both the $\\lambda$-calculus (for functions) and the\n$\\pi$-calculus (for communication). To illustrate our proposal, we model a\nreal-world serverless system. Thanks to our model, we are also able to capture\nand pinpoint the limitations of current vendor technologies, proposing possible\namendments.","collection":{"title":"2019"},"type":"article","title":"No more, no less - A formal model for serverless computing","path":"no-more-no-less-arxiv","where":"In CoRR abs\/1903.07962","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1903.07962"},"id":46,"bibtex":"@article{DBLP:journals\/corr\/abs-1903-07962,\n  author       = {Maurizio Gabbrielli and\n                  Saverio Giallorenzo and\n                  Ivan Lanese and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Stefano Pio Zingaro},\n  title        = {No more, no less - {A} formal model for serverless computing},\n  journal      = {CoRR},\n  volume       = {abs\/1903.07962},\n  year         = {2019},\n  url          = {http:\/\/arxiv.org\/abs\/1903.07962},\n  eprinttype    = {arXiv},\n  eprint       = {1903.07962},\n  timestamp    = {Sat, 23 Jan 2021 01:17:26 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1903-07962.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1903-07962","authors":[{"last":false,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":true,"name":"Stefano Pio Zingaro","link":"https:\/\/dblp.uni-trier.de\/pid\/220\/4883"}]},"from-infinity-to-choreographies":{"year":"2022","abstract":"<p>Choreographies are formal descriptions of distributed systems, which focus on the way in which participants communicate. While they are useful for analysing protocols, in practice systems are written directly by specifying each participant\u2019s behaviour. This created the need for choreography extraction: the process of obtaining a choreography that faithfully describes the collective behaviour of all participants in a distributed protocol.<\/p><p>Previous works have addressed this problem for systems with a predefined, finite number of participants. In this work, we show how to extract choreographies from system descriptions where the total number of participants is unknown and unbounded, due to the ability of spawning new processes at runtime. This extension is challenging, since previous algorithms relied heavily on the set of possible states of the network during execution being finite.<\/p>","collection":{"title":"2022"},"type":"inproceedings","title":"From Infinity to Choreographies - Extraction for Unbounded Systems","path":"from-infinity-to-choreographies","pdf":"kcm22","where":"In proceedings of LOPSTR 2022, pp. 103-120","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-031-16767-6_6"},"id":22,"bibtex":"@inproceedings{DBLP:conf\/lopstr\/KjaerCM22,\n  author       = {Bj{\\o}rn Angel Kj{\\ae}r and\n                  Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  editor       = {Alicia Villanueva},\n  title        = {From Infinity to Choreographies - Extraction for Unbounded Systems},\n  booktitle    = {Logic-Based Program Synthesis and Transformation - 32nd International\n                  Symposium, {LOPSTR} 2022, Tbilisi, Georgia, September 21-23, 2022,\n                  Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {13474},\n  pages        = {103--120},\n  publisher    = {Springer},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-031-16767-6\\_6},\n  doi          = {10.1007\/978-3-031-16767-6\\_6},\n  timestamp    = {Tue, 18 Oct 2022 22:17:04 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/lopstr\/KjaerCM22.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/lopstr\/KjaerCM22","authors":[{"last":false,"name":"Bjørn Angel Kjær","link":"https:\/\/dblp.uni-trier.de\/pid\/324\/7924"},{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-031-16767-6_6"},"interface-based-service-composition-with-aggregation":{"year":"2012","abstract":"<p>Service-oriented architectures (SOAs) usually comprehend in-the-middle entities such as proxies or service mediators that compose services abstracting from the order in which they exchange messages. Although widely used, these entities are usually implemented by means of ad-hoc solutions.<\/p><p>In this paper we generalise this composition mechanism by identifying the primitive notion of aggregation. We formally define the semantics of aggregation in terms of a process calculus. We also provide a reference implementation for this primitive by extending the Jolie language, thus allowing for the experimentation with real SOA scenarios.<\/p>","collection":{"title":"2012"},"type":"inproceedings","title":"Interface-Based Service Composition with Aggregation","path":"interface-based-service-composition-with-aggregation","pdf":"dggmm12b","where":"In proceedings of ESOCC 2012, pp. 48-63","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q62043700"},"id":105,"bibtex":"@inproceedings{DBLP:conf\/esocc\/PredaGGMM12,\n  author       = {Mila Dalla Preda and\n                  Maurizio Gabbrielli and\n                  Claudio Guidi and\n                  Jacopo Mauro and\n                  Fabrizio Montesi},\n  editor       = {Flavio De Paoli and\n                  Ernesto Pimentel and\n                  Gianluigi Zavattaro},\n  title        = {Interface-Based Service Composition with Aggregation},\n  booktitle    = {Service-Oriented and Cloud Computing - First European Conference,\n                  {ESOCC} 2012, Bertinoro, Italy, September 19-21, 2012. Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {7592},\n  pages        = {48--63},\n  publisher    = {Springer},\n  year         = {2012},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-642-33427-6\\_4},\n  doi          = {10.1007\/978-3-642-33427-6\\_4},\n  timestamp    = {Sat, 09 Apr 2022 12:33:36 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/esocc\/PredaGGMM12.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/esocc\/PredaGGMM12","authors":[{"last":false,"name":"Mila Dalla Preda","link":"https:\/\/dblp.uni-trier.de\/pid\/72\/6805"},{"last":false,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Jacopo Mauro","link":"https:\/\/dblp.uni-trier.de\/pid\/53\/1605"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"jot":{"notes":{"text":"<award>Best Artefact Award<\/award>"},"year":"2023","abstract":"We present JoT, a testing framework for Microservice Architectures (MSAs) based on technology agnosticism, a core principle of microservices. The main advantage of JoT is that it reduces the amount of work for a) testing for MSAs whose services use different technology stacks, b) writing tests that involve multiple services, and c) reusing tests of the same MSA under different deployment configurations or after changing some of its components (e.g., when, for performance, one reimplements a service with a different technology). In JoT, tests are orchestrators that can both consume or offer operations from\/to the MSA under test. The language for writing JoT tests is Jolie, which provides constructs that support technology agnosticism and the definition of terse test behaviours. We present the methodology we envision for testing MSAs with JoT and we validate it by implementing non-trivial test scenario","collection":{"title":"2023"},"type":"inproceedings","title":"JoT: A Jolie Framework for Testing Microservices","path":"jot","pdf":"gmpru23","where":"In proceedings of COORDINATION 2023, pp. 172-191","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-031-35361-1_10"},"id":7,"bibtex":"@inproceedings{DBLP:conf\/coordination\/GiallorenzoMPRU23,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Florian Rademacher and\n                  Narongrit Unwerawattana},\n  editor       = {Sung{-}Shik Jongmans and\n                  Ant{\\'{o}}nia Lopes},\n  title        = {JoT: {A} Jolie Framework for Testing Microservices},\n  booktitle    = {Coordination Models and Languages - 25th {IFIP} {WG} 6.1 International\n                  Conference, {COORDINATION} 2023, Held as Part of the 18th International\n                  Federated Conference on Distributed Computing Techniques, DisCoTec\n                  2023, Lisbon, Portugal, June 19-23, 2023, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {13908},\n  pages        = {172--191},\n  publisher    = {Springer},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-031-35361-1\\_10},\n  doi          = {10.1007\/978-3-031-35361-1\\_10},\n  timestamp    = {Fri, 07 Jul 2023 23:30:43 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/coordination\/GiallorenzoMPRU23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/coordination\/GiallorenzoMPRU23","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":false,"name":"Florian Rademacher","link":"https:\/\/dblp.uni-trier.de\/pid\/167\/5000"},{"last":true,"name":"Narongrit Unwerawattana","link":"https:\/\/dblp.uni-trier.de\/pid\/349\/6040"}],"doi":"10.1007\/978-3-031-35361-1_10"},"a-model-of-evolvable-components":{"year":"2010","abstract":"<p>We present a model of components following the process calculus approach. The main problem was isolating primitives that capture the relevant concepts of component-based systems. The key features of the calculus are: a hierarchical structure of components; a prominent role to input\/output interfaces; the possibility of stopping and capturing components; a mechanism of channel interactions, orthogonal to the activity of components, which may produce tunneling effects that bypass the component hierarchy.<\/p><p>We present the calculus, explain the syntax, formulate its operational semantics and a basic type system. We show a number of examples of use of the calculus, with particular emphasis to common evolvability patterns for components.<\/p>","collection":{"title":"2010"},"type":"inproceedings","title":"A Model of Evolvable Components","path":"a-model-of-evolvable-components","pdf":"ms10","where":"In proceedings of TGC 2010, pp. 153-171","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-642-15640-3_11"},"id":111,"bibtex":"@inproceedings{DBLP:conf\/tgc\/MontesiS10,\n  author       = {Fabrizio Montesi and\n                  Davide Sangiorgi},\n  editor       = {Martin Wirsing and\n                  Martin Hofmann and\n                  Axel Rauschmayer},\n  title        = {A Model of Evolvable Components},\n  booktitle    = {Trustworthly Global Computing - 5th International Symposium, {TGC}\n                  2010, Munich, Germany, February 24-26, 2010, Revised Selected Papers},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {6084},\n  pages        = {153--171},\n  publisher    = {Springer},\n  year         = {2010},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-642-15640-3\\_11},\n  doi          = {10.1007\/978-3-642-15640-3\\_11},\n  timestamp    = {Tue, 14 May 2019 10:00:52 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/tgc\/MontesiS10.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/tgc\/MontesiS10","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Davide Sangiorgi","link":"https:\/\/dblp.uni-trier.de\/pid\/s\/DavideSangiorgi"}],"doi":"10.1007\/978-3-642-15640-3_11"},"process-aware-web-programming-with-jolie":{"notes":{"text":"<award>Best Poster Award<\/award>"},"year":"2013","abstract":"We present a programming framework, based upon the Jolie language, for the native modelling of process-aware web information systems. Our major contribution is to offer a unifying approach for the programming of distributed architectures based on HTTP that support typical features of the process-oriented paradigm, such as structured communication flows and multiparty sessions.","collection":{"title":"2013"},"type":"inproceedings","title":"Process-aware web programming with Jolie","path":"process-aware-web-programming-with-jolie","pdf":"m13","where":"In proceedings of SAC 2013, pp. 761-763","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q59702050"},"id":103,"bibtex":"@inproceedings{DBLP:conf\/sac\/Montesi13,\n  author       = {Fabrizio Montesi},\n  editor       = {Sung Y. Shin and\n                  Jos{\\'{e}} Carlos Maldonado},\n  title        = {Process-aware web programming with Jolie},\n  booktitle    = {Proceedings of the 28th Annual {ACM} Symposium on Applied Computing,\n                  {SAC} '13, Coimbra, Portugal, March 18-22, 2013},\n  pages        = {761--763},\n  publisher    = {{ACM}},\n  year         = {2013},\n  url          = {https:\/\/doi.org\/10.1145\/2480362.2480507},\n  doi          = {10.1145\/2480362.2480507},\n  timestamp    = {Sun, 02 Jun 2019 21:18:36 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/sac\/Montesi13.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/sac\/Montesi13","authors":{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}},"jolie-lemma-arxiv":{"peerReviewedVersion":"conf\/coordination\/GiallorenzoMPRS21","year":"2021","abstract":"In the field of microservices, Model-Driven Engineering has emerged as a\npowerful methodology for architectural design, and new programming languages\nhave introduced language abstractions to deal with microservice development\nmore effectively. In this article, we present the first preliminary\ninvestigation of how the two approaches can be married, taking the LEMMA\nframework and the Jolie programming language as respective representatives. By\ndeveloping a conceptual metamodel for Jolie, we elicit a strong link between\nthe two approaches, which shows that there is much to gain. We discuss a few\nlow-hanging fruits that come from our finding and present some interesting\nfuture directions that arise from our new viewpoint.","collection":{"title":"2021"},"type":"article","title":"Jolie & LEMMA: Model-Driven Engineering and Programming Languages Meet on Microservices","path":"jolie-lemma-arxiv","where":"In CoRR abs\/2104.02458","links":{"last":true,"name":"arxiv.org","href":"https:\/\/arxiv.org\/abs\/2104.02458"},"id":36,"bibtex":"@article{DBLP:journals\/corr\/abs-2104-02458,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Florian Rademacher and\n                  Sabine Sachweh},\n  title        = {Jolie {\\&} {LEMMA:} Model-Driven Engineering and Programming Languages\n                  Meet on Microservices},\n  journal      = {CoRR},\n  volume       = {abs\/2104.02458},\n  year         = {2021},\n  url          = {https:\/\/arxiv.org\/abs\/2104.02458},\n  eprinttype    = {arXiv},\n  eprint       = {2104.02458},\n  timestamp    = {Tue, 13 Apr 2021 16:46:17 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2104-02458.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2104-02458","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":false,"name":"Florian Rademacher","link":"https:\/\/dblp.uni-trier.de\/pid\/167\/5000"},{"last":true,"name":"Sabine Sachweh","link":"https:\/\/dblp.uni-trier.de\/pid\/19\/669"}]},"thats-enough-arxiv":{"year":"2017","abstract":"Choreographies are widely used for the specification of concurrent and\ndistributed software architectures. Since asynchronous communications are\nubiquitous in real-world systems, previous works have proposed different\napproaches for the formal modelling of asynchrony in choreographies. Such\napproaches typically rely on ad-hoc syntactic terms or semantics for capturing\nthe concept of messages in transit, yielding different formalisms that have to\nbe studied separately.\n  In this work, we take a different approach, and show that such extensions are\nnot needed to reason about asynchronous communications in choreographies.\nRather, we demonstrate how a standard choreography calculus already has all the\nneeded expressive power to encode messages in transit (and thus asynchronous\ncommunications) through the primitives of process spawning and name mobility.\nThe practical consequence of our results is that we can reason about real-world\nsystems within a choreography formalism that is simpler than those hitherto\nproposed.","collection":{"title":"2017"},"title":"That's Enough: Asynchrony with Standard Choreography Primitives","type":"article","path":"thats-enough-arxiv","where":"In CoRR abs\/1711.08700","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1711.08700"},"id":71,"bibtex":"@article{DBLP:journals\/corr\/abs-1711-08700,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  title        = {That's Enough: Asynchrony with Standard Choreography Primitives},\n  journal      = {CoRR},\n  volume       = {abs\/1711.08700},\n  year         = {2017},\n  url          = {http:\/\/arxiv.org\/abs\/1711.08700},\n  eprinttype    = {arXiv},\n  eprint       = {1711.08700},\n  timestamp    = {Mon, 13 Aug 2018 16:49:11 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1711-08700.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1711-08700","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"now-it-compiles-certified-automatic-repair-of-uncompilable-protocols":{"year":"2023","abstract":"<p>Choreographic programming is a paradigm where developers write the global specification (called choreography) of a communicating system, and then a correct-by-construction distributed implementation is compiled automatically. Unfortunately, it is possible to write choreographies that cannot be compiled, because of issues related to an agreement property known as knowledge of choice. This forces programmers to reason manually about implementation details that may be orthogonal to the protocol that they are writing.<\/p><p>Amendment is an automatic procedure for repairing uncompilable choreographies. We present a formalisation of amendment from the literature, built upon an existing formalisation of choreographic programming. However, in the process of formalising the expected properties of this procedure, we discovered a subtle counterexample that invalidates the original published and peer-reviewed pen-and-paper theory. We discuss how using a theorem prover led us to both finding the issue, and stating and proving a correct formulation of the properties of amendment.<\/p>","collection":{"title":"2023"},"type":"inproceedings","title":"Now It Compiles! Certified Automatic Repair of Uncompilable Protocols","path":"now-it-compiles-certified-automatic-repair-of-uncompilable-protocols","pdf":"cm23","where":"In proceedings of ITP 2023, pp. 11:1-11:19","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.4230\/LIPIcs.ITP.2023.11"},"id":11,"bibtex":"@inproceedings{DBLP:conf\/itp\/Cruz-FilipeM23,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  editor       = {Adam Naumowicz and\n                  Ren{\\'{e}} Thiemann},\n  title        = {Now It Compiles! Certified Automatic Repair of Uncompilable Protocols},\n  booktitle    = {14th International Conference on Interactive Theorem Proving, {ITP}\n                  2023, July 31 to August 4, 2023, Bia{\\l}ystok, Poland},\n  series       = {LIPIcs},\n  volume       = {268},\n  pages        = {11:1--11:19},\n  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.4230\/LIPIcs.ITP.2023.11},\n  doi          = {10.4230\/LIPIcs.ITP.2023.11},\n  timestamp    = {Sat, 30 Sep 2023 09:51:04 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/itp\/Cruz-FilipeM23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/itp\/Cruz-FilipeM23","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.4230\/LIPIcs.ITP.2023.11"},"choreographies-for-reactive-programming-arxiv":{"year":"2018","abstract":"Modular programming is a cornerstone in software development, as it allows to\nbuild complex systems from the assembly of simpler components, and support\nreusability and substitution principles. In a distributed setting, component\nassembly is supported by communication that is often required to follow a\nprescribed protocol of interaction. In this paper, we present a language for\nthe modular development of distributed systems, where the assembly of\ncomponents is supported by a choreography that specifies the communication\nprotocol. Our language allows to separate component behaviour, given in terms\nof reactive data ports, and choreographies, specified as first class entities.\nThis allows us to consider reusability and substitution principles for both\ncomponents and choreographies. We show how our model can be compiled into a\nmore operational perspective in a provably-correct way, and we present a typing\ndiscipline that addresses communication safety and progress of systems, where a\nnotion of substitutability naturally arises.","collection":{"title":"2018"},"title":"Choreographies for Reactive Programming","type":"article","path":"choreographies-for-reactive-programming-arxiv","where":"In CoRR abs\/1801.08107","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1801.08107"},"id":55,"bibtex":"@article{DBLP:journals\/corr\/abs-1801-08107,\n  author       = {Marco Carbone and\n                  Fabrizio Montesi and\n                  Hugo Torres Vieira},\n  title        = {Choreographies for Reactive Programming},\n  journal      = {CoRR},\n  volume       = {abs\/1801.08107},\n  year         = {2018},\n  url          = {http:\/\/arxiv.org\/abs\/1801.08107},\n  eprinttype    = {arXiv},\n  eprint       = {1801.08107},\n  timestamp    = {Mon, 13 Aug 2018 16:46:02 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1801-08107.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1801-08107","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Hugo Torres Vieira","link":"https:\/\/dblp.uni-trier.de\/pid\/48\/6550"}]},"implementing-choreography-extraction-impl-only-arxiv":{"year":"2019","abstract":"Choreography extraction deals with the generation of a choreography (a global\ndescription of communication behaviour) from a set of local process behaviours.\nIn this work, we implement a previously proposed theory for extraction and show\nthat, in spite of its theoretical exponential complexity, it is usable in\npractice. We discuss the data structures needed for an efficient\nimplementation, introduce some optimizations, and perform a systematic\npractical evaluation.","collection":{"title":"2019"},"title":"Implementing choreography extraction","type":"article","path":"implementing-choreography-extraction-impl-only-arxiv","where":"In CoRR abs\/1910.11741","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1910.11741"},"id":48,"bibtex":"@article{DBLP:journals\/corr\/abs-1910-11741,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi and\n                  Larisa Safina},\n  title        = {Implementing choreography extraction},\n  journal      = {CoRR},\n  volume       = {abs\/1910.11741},\n  year         = {2019},\n  url          = {http:\/\/arxiv.org\/abs\/1910.11741},\n  eprinttype    = {arXiv},\n  eprint       = {1910.11741},\n  timestamp    = {Thu, 31 Oct 2019 14:02:26 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1910-11741.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1910-11741","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"}]},"an-efficient-management-of-correlation-sets-with-broadcast":{"year":"2011","abstract":"<p>A fundamental aspect which affects the efficiency and the performance of Service-Oriented Architectures is the mechanism which allows to manage sessions and, in particular, to assign incoming messages to the correct sessions (also known as service instances). A relevant mechanism for solving this problem, first introduced by BPEL and then used in other languages (e.g. Jolie) is that one based on correlation sets. The BPEL and Jolie languages are currently allowing the use of messages whose target is only one session. However there are a lot of scenarios where being able to send a broadcast message to more than one session could be useful. Supporting such a broadcast primitive means to allow correlation sets which can contain unspecified variables and this can be very inefficient, since usual implementations in terms of hash tables cannot be used in this case.<\/p><p>In this paper we propose a data structure, based on radix trees and an algorithm for managing a correlation mechanism that supports the broadcast primitive, without degrading the performances.<\/p>","collection":{"title":"2011"},"type":"inproceedings","title":"An Efficient Management of Correlation Sets with Broadcast","path":"an-efficient-management-of-correlation-sets-with-broadcast","pdf":"mggm11","where":"In proceedings of COORDINATION 2011, pp. 80-94","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q62043703"},"id":108,"bibtex":"@inproceedings{DBLP:conf\/coordination\/MauroGGM11,\n  author       = {Jacopo Mauro and\n                  Maurizio Gabbrielli and\n                  Claudio Guidi and\n                  Fabrizio Montesi},\n  editor       = {Wolfgang De Meuter and\n                  Gruia{-}Catalin Roman},\n  title        = {An Efficient Management of Correlation Sets with Broadcast},\n  booktitle    = {Coordination Models and Languages - 13th International Conference,\n                  {COORDINATION} 2011, Reykjavik, Iceland, June 6-9, 2011. Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {6721},\n  pages        = {80--94},\n  publisher    = {Springer},\n  year         = {2011},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-642-21464-6\\_6},\n  doi          = {10.1007\/978-3-642-21464-6\\_6},\n  timestamp    = {Sat, 09 Apr 2022 12:35:33 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/coordination\/MauroGGM11.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/coordination\/MauroGGM11","authors":[{"last":false,"name":"Jacopo Mauro","link":"https:\/\/dblp.uni-trier.de\/pid\/53\/1605"},{"last":false,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"jolie-and-lemma":{"year":"2021","abstract":"In microservices, Model-Driven Engineering (MDE) has emerged as a powerful methodology for architectural design. Independently, the community of programming languages has investigated new linguistic abstractions for effective microservice development. Here, we present the first preliminary study of how the two approaches can cross-pollinate, taking the LEMMA framework and the Jolie programming language as respective representatives. We establish a common ground for comparing the two technologies in terms of metamodels, discuss practical enhancements that can be derived from the comparison, and present some directions for future work that arise from our new viewpoint.","collection":{"title":"2021"},"type":"inproceedings","title":"Jolie and LEMMA: Model-Driven Engineering and Programming Languages Meet on Microservices","path":"jolie-and-lemma","pdf":"gmprs21","where":"In proceedings of COORDINATION 2021, pp. 276-284","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-030-78142-2_17"},"id":29,"bibtex":"@inproceedings{DBLP:conf\/coordination\/GiallorenzoMPRS21,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  Florian Rademacher and\n                  Sabine Sachweh},\n  editor       = {Ferruccio Damiani and\n                  Ornela Dardha},\n  title        = {Jolie and {LEMMA:} Model-Driven Engineering and Programming Languages\n                  Meet on Microservices},\n  booktitle    = {Coordination Models and Languages - 23rd {IFIP} {WG} 6.1 International\n                  Conference, {COORDINATION} 2021, Held as Part of the 16th International\n                  Federated Conference on Distributed Computing Techniques, DisCoTec\n                  2021, Valletta, Malta, June 14-18, 2021, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {12717},\n  pages        = {276--284},\n  publisher    = {Springer},\n  year         = {2021},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-030-78142-2\\_17},\n  doi          = {10.1007\/978-3-030-78142-2\\_17},\n  timestamp    = {Tue, 15 Jun 2021 17:23:40 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/coordination\/GiallorenzoMPRS21.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/coordination\/GiallorenzoMPRS21","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":false,"name":"Florian Rademacher","link":"https:\/\/dblp.uni-trier.de\/pid\/167\/5000"},{"last":true,"name":"Sabine Sachweh","link":"https:\/\/dblp.uni-trier.de\/pid\/19\/669"}],"doi":"10.1007\/978-3-030-78142-2_17"},"choreographies-in-practice-arxiv":{"peerReviewedVersion":"conf\/forte\/Cruz-FilipeM16","year":"2016","abstract":"Choreographic Programming is a development methodology for concurrent\nsoftware that guarantees correctness by construction. The key to this paradigm\nis to disallow mismatched I\/O operations in programs, called choreographies,\nand then mechanically synthesise distributed implementations in terms of\nstandard process models via a mechanism known as EndPoint Projection (EPP).\n  Despite the promise of choreographic programming, there is still a lack of\npractical evaluations that illustrate the applicability of choreographies to\nconcrete computational problems with standard concurrent solutions. In this\nwork, we explore the potential of choreographies by using Procedural\nChoreographies (PC), a model that we recently proposed, to write distributed\nalgorithms for sorting (Quicksort), solving linear equations (Gaussian\nelimination), and computing Fast Fourier Transform. We discuss the lessons\nlearned from this experiment, giving possible directions for the usage and\nfuture improvements of choreography languages.","collection":{"title":"2016"},"type":"article","title":"Choreographies in Practice","path":"choreographies-in-practice-arxiv","where":"In CoRR abs\/1602.08863","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1602.08863"},"id":83,"bibtex":"@article{DBLP:journals\/corr\/Cruz-FilipeM16a,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Fabrizio Montesi},\n  title        = {Choreographies in Practice},\n  journal      = {CoRR},\n  volume       = {abs\/1602.08863},\n  year         = {2016},\n  url          = {http:\/\/arxiv.org\/abs\/1602.08863},\n  eprinttype    = {arXiv},\n  eprint       = {1602.08863},\n  timestamp    = {Mon, 13 Aug 2018 16:48:06 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/Cruz-FilipeM16a.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/Cruz-FilipeM16a","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"certified-compilation-of-choreographies-with-hacc-arxiv":{"peerReviewedVersion":"conf\/forte\/Cruz-FilipeLM23","year":"2023","abstract":"Programming communicating processes is challenging, because it requires\nwriting separate programs that perform compatible send and receive actions at\nthe right time during execution. Leaving this task to the programmer can easily\nlead to bugs. Choreographic programming addresses this challenge by equipping\ndevelopers with high-level abstractions for codifying the desired communication\nstructures from a global viewpoint. Given a choreography, implementations of\nthe involved processes can be automatically generated by endpoint projection\n(EPP).\n  While choreographic programming prevents manual mistakes in the\nimplementation of communications, the correctness of a choreographic\nprogramming framework crucially hinges on the correctness of its complex\ncompiler, which has motivated formalisation of theories of choreographic\nprogramming in theorem provers. In this paper, we build upon one of these\nformalisations to construct a toolchain that produces executable code from a\nchoreography.","collection":{"title":"2023"},"type":"article","title":"Certified Compilation of Choreographies with hacc","path":"certified-compilation-of-choreographies-with-hacc-arxiv","pdf":"clm23-arxiv","where":"In CoRR abs\/2303.03972","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.48550\/arXiv.2303.03972"},"id":14,"bibtex":"@article{DBLP:journals\/corr\/abs-2303-03972,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Lovro Lugovic and\n                  Fabrizio Montesi},\n  title        = {Certified Compilation of Choreographies with hacc},\n  journal      = {CoRR},\n  volume       = {abs\/2303.03972},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.48550\/arXiv.2303.03972},\n  doi          = {10.48550\/arXiv.2303.03972},\n  eprinttype    = {arXiv},\n  eprint       = {2303.03972},\n  timestamp    = {Wed, 15 Mar 2023 17:23:45 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2303-03972.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2303-03972","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Lovro Lugovic","link":"https:\/\/dblp.uni-trier.de\/pid\/305\/8036"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.48550\/arXiv.2303.03972"},"multiparty-session-types-as-coherence-proofs-journal":{"year":"2017","abstract":"We propose a Curry-Howard correspondence between a language for programming multiparty sessions and a generalisation of Classical Linear Logic (CLL). In this framework, propositions correspond to the local behaviour of a participant in a multiparty session type, proofs to processes, and proof normalisation to executing communications. Our key contribution is generalising duality, from CLL, to a new notion of n-ary compatibility, called coherence. Building on coherence as a principle of compositionality, we generalise the cut rule of CLL to a new rule for composing many processes communicating in a multiparty session. We prove the soundness of our model by showing the admissibility of our new rule, which entails deadlock-freedom via our correspondence.","collection":{"title":"2017"},"type":"article","title":"Multiparty session types as coherence proofs","path":"multiparty-session-types-as-coherence-proofs-journal","pdf":"cmsy17","where":"In Acta Informatica 54","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q113905931"},"id":61,"bibtex":"@article{DBLP:journals\/acta\/CarboneMSY17,\n  author       = {Marco Carbone and\n                  Fabrizio Montesi and\n                  Carsten Sch{\\\"{u}}rmann and\n                  Nobuko Yoshida},\n  title        = {Multiparty session types as coherence proofs},\n  journal      = {Acta Informatica},\n  volume       = {54},\n  number       = {3},\n  pages        = {243--269},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.1007\/s00236-016-0285-y},\n  doi          = {10.1007\/s00236-016-0285-y},\n  timestamp    = {Mon, 28 Aug 2023 21:42:10 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/acta\/CarboneMSY17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/acta\/CarboneMSY17","authors":[{"last":false,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Carsten Schürmann","link":"https:\/\/dblp.uni-trier.de\/pid\/07\/4034"},{"last":true,"name":"Nobuko Yoshida","link":"https:\/\/dblp.uni-trier.de\/pid\/29\/3650"}]},"multiparty-languages":{"notes":{"text":"<award>Distinguished Paper Award<\/award>"},"year":"2021","abstract":"<p>Choreographic languages aim to express multiparty communication protocols, by providing primitives that make interaction manifest. Multitier languages enable programming computation that spans across several tiers of a distributed system, by supporting primitives that allow computation to change the location of execution. Rooted into different theoretical underpinnings\u2014respectively process calculi and lambda calculus\u2014the two paradigms have been investigated independently by different research communities with little or no contact. As a result, the link between the two paradigms has remained hidden for long.<\/p><p>In this paper, we show that choreographic languages and multitier languages are surprisingly similar. We substantiate our claim by isolating the core abstractions that differentiate the two approaches and by providing algorithms that translate one into the other in a straightforward way. We believe that this work paves the way for joint research and cross-fertilisation among the two communities.<\/p>","collection":{"title":"2021"},"type":"inproceedings","title":"Multiparty Languages: The Choreographic and Multitier Cases (Pearl)","path":"multiparty-languages","pdf":"gmprsw21","where":"In proceedings of ECOOP 2021, pp. 22:1-22:27","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.4230\/LIPIcs.ECOOP.2021.22"},"id":30,"bibtex":"@inproceedings{DBLP:conf\/ecoop\/GiallorenzoMPRS21,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Marco Peressotti and\n                  David Richter and\n                  Guido Salvaneschi and\n                  Pascal Weisenburger},\n  editor       = {Anders M{\\o}ller and\n                  Manu Sridharan},\n  title        = {Multiparty Languages: The Choreographic and Multitier Cases (Pearl)},\n  booktitle    = {35th European Conference on Object-Oriented Programming, {ECOOP} 2021,\n                  July 11-17, 2021, Aarhus, Denmark (Virtual Conference)},\n  series       = {LIPIcs},\n  volume       = {194},\n  pages        = {22:1--22:27},\n  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\n  year         = {2021},\n  url          = {https:\/\/doi.org\/10.4230\/LIPIcs.ECOOP.2021.22},\n  doi          = {10.4230\/LIPIcs.ECOOP.2021.22},\n  timestamp    = {Mon, 26 Jun 2023 20:47:01 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/ecoop\/GiallorenzoMPRS21.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/ecoop\/GiallorenzoMPRS21","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":false,"name":"David Richter","link":"https:\/\/dblp.uni-trier.de\/pid\/66\/3726"},{"last":false,"name":"Guido Salvaneschi","link":"https:\/\/dblp.uni-trier.de\/pid\/14\/7915"},{"last":true,"name":"Pascal Weisenburger","link":"https:\/\/dblp.uni-trier.de\/pid\/188\/1945"}],"doi":"10.4230\/LIPIcs.ECOOP.2021.22"},"service-oriented-architectures":{"year":"2014","abstract":"In Service-Oriented Architectures (SOA), services are composed by coordinating their communications into a flow of interactions. Coloured Petri nets (CPN) offer a formal yet easy tool for modelling interactions in SOAs, however mapping abstract SOAs into executable ones requires a non-trivial and time-costly analysis. Here, we propose a methodology that maps CPN-modelled SOAs into Jolie SOAs (our target language), exploiting a collection of recurring control-flow patterns, called Workflow Patterns, as composable blocks of the translation. We validate our approach with a realistic use case. In addition, we pragmatically asses the expressiveness of Jolie wrt the considered WPs.","collection":{"title":"2014"},"type":"inproceedings","title":"Service-Oriented Architectures: From Design to Production Exploiting Workflow Patterns","path":"service-oriented-architectures","pdf":"ggm14","where":"In proceedings of DCAI 2014, pp. 131-139","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-07593-8_17"},"id":98,"bibtex":"@inproceedings{DBLP:conf\/dcai\/GabbrielliGM14,\n  author       = {Maurizio Gabbrielli and\n                  Saverio Giallorenzo and\n                  Fabrizio Montesi},\n  editor       = {Sigeru Omatu and\n                  Hugues Bersini and\n                  Juan M. Corchado Rodr{\\'{\\i}}guez and\n                  Sara Rodr{\\'{\\i}}guez and\n                  Pawel Pawlewski and\n                  Edgardo Bucciarelli},\n  title        = {Service-Oriented Architectures: From Design to Production Exploiting\n                  Workflow Patterns},\n  booktitle    = {Distributed Computing and Artificial Intelligence, 11th International\n                  Conference, {DCAI} 2014, Salamanca, Spain, June 4-6, 2014},\n  series       = {Advances in Intelligent Systems and Computing},\n  volume       = {290},\n  pages        = {131--139},\n  publisher    = {Springer},\n  year         = {2014},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-07593-8\\_17},\n  doi          = {10.1007\/978-3-319-07593-8\\_17},\n  timestamp    = {Sat, 30 Sep 2023 09:38:44 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/dcai\/GabbrielliGM14.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/dcai\/GabbrielliGM14","authors":[{"last":false,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"},{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}],"doi":"10.1007\/978-3-319-07593-8_17"},"implementing-choreography-extraction-complete-arxiv":{"year":"2022","abstract":"Choreographies are global descriptions of interactions among concurrent\ncomponents, most notably used in the settings of verification and synthesis of\ncorrect-by-construction software. They require a top-down approach: programmers\nfirst write choreographies, and then use them to verify or synthesize their\nprograms. However, most software does not come with choreographies yet, which\nprevents their application. To attack this problem, previous work investigated\nchoreography extraction, which automatically constructs a choreography that\ndescribes the behaviour of a given set of programs or protocol specifications.\n  We propose a new extraction methodology that improves on the state of the\nart: we can deal with programs that are equipped with state and internal\ncomputation and time complexity is dramatically better. We also implement this\ntheory and show that, in spite of its theoretical exponential complexity, it is\nusable in practice. We discuss the data structures needed for an efficient\nimplementation, introduce some optimisations, and perform a systematic\npractical evaluation.","collection":{"title":"2022"},"type":"article","title":"Implementing Choreography Extraction","path":"implementing-choreography-extraction-complete-arxiv","where":"In CoRR abs\/2205.02636","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.48550\/arXiv.2205.02636"},"id":25,"bibtex":"@article{DBLP:journals\/corr\/abs-2205-02636,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Kim S. Larsen and\n                  Fabrizio Montesi and\n                  Larisa Safina},\n  title        = {Implementing Choreography Extraction},\n  journal      = {CoRR},\n  volume       = {abs\/2205.02636},\n  year         = {2022},\n  url          = {https:\/\/doi.org\/10.48550\/arXiv.2205.02636},\n  doi          = {10.48550\/arXiv.2205.02636},\n  eprinttype    = {arXiv},\n  eprint       = {2205.02636},\n  timestamp    = {Wed, 11 May 2022 17:29:40 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-2205-02636.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-2205-02636","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Kim S. Larsen","link":"https:\/\/dblp.uni-trier.de\/pid\/l\/KimSLarsen"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Larisa Safina","link":"https:\/\/dblp.uni-trier.de\/pid\/172\/1245"}],"doi":"10.48550\/arXiv.2205.02636"},"sliceable-monolith":{"year":"2021","abstract":"We propose Sliceable Monolith, a new methodology for developing microservice architectures and perform their integration testing by leveraging most of the simplicity of a monolith: a single codebase and a local execution environment that simulates distribution. Then, a tool compiles a codebase for each microservice and a cloud deployment configuration. The key enabler of our approach is the technology-agnostic service definition language offered by Jolie.","collection":{"title":"2021"},"type":"inproceedings","title":"Sliceable Monolith: Monolith First, Microservices Later","path":"sliceable-monolith","pdf":"mpp21","where":"In proceedings of SCC 2021, pp. 364-366","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1109\/SCC53864.2021.00050"},"id":28,"bibtex":"@inproceedings{DBLP:conf\/IEEEscc\/MontesiPP21,\n  author       = {Fabrizio Montesi and\n                  Marco Peressotti and\n                  Valentino Picotti},\n  editor       = {Barbara Carminati and\n                  Carl K. Chang and\n                  Ernesto Daminai and\n                  Shuigung Deng and\n                  Wei Tan and\n                  Zhongjie Wang and\n                  Robert Ward and\n                  Jia Zhang},\n  title        = {Sliceable Monolith: Monolith First, Microservices Later},\n  booktitle    = {{IEEE} International Conference on Services Computing, {SCC} 2021,\n                  Chicago, IL, USA, September 5-10, 2021},\n  pages        = {364--366},\n  publisher    = {{IEEE}},\n  year         = {2021},\n  url          = {https:\/\/doi.org\/10.1109\/SCC53864.2021.00050},\n  doi          = {10.1109\/SCC53864.2021.00050},\n  timestamp    = {Fri, 23 Jun 2023 11:36:46 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/IEEEscc\/MontesiPP21.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/IEEEscc\/MontesiPP21","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":false,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"},{"last":true,"name":"Valentino Picotti","link":"https:\/\/dblp.uni-trier.de\/pid\/287\/9990"}],"doi":"10.1109\/SCC53864.2021.00050"},"packaging-microservices":{"year":"2017","abstract":"We describe a first proposal for a new packaging system for microservices based on the Jolie programming language, called the Jolie Package Manager (JPM). Its main features revolve around service interfaces, which make the functionalities that a service provides and depends on explicit. For the first time, JPM supports binding a service to an externally-provided package, and a notion of interface parametricity that can be used to develop generic service libraries that can modify the behaviour of arbitrary services. We illustrate the latter with a generic circuit breaker package.","collection":{"title":"2017"},"type":"inproceedings","title":"Packaging Microservices - (Work in Progress)","path":"packaging-microservices","pdf":"mt17-forte","where":"In proceedings of DAIS 2017, pp. 131-137","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-59665-5_9"},"id":62,"bibtex":"@inproceedings{DBLP:conf\/dais\/MontesiT17,\n  author       = {Fabrizio Montesi and\n                  Dan Sebastian Thrane},\n  editor       = {Lydia Y. Chen and\n                  Hans P. Reiser},\n  title        = {Packaging Microservices - (Work in Progress)},\n  booktitle    = {Distributed Applications and Interoperable Systems - 17th {IFIP} {WG}\n                  6.1 International Conference, {DAIS} 2017, Held as Part of the 12th\n                  International Federated Conference on Distributed Computing Techniques,\n                  DisCoTec 2017, Neuch{\\^{a}}tel, Switzerland, June 19-22, 2017, Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {10320},\n  pages        = {131--137},\n  publisher    = {Springer},\n  year         = {2017},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-59665-5\\_9},\n  doi          = {10.1007\/978-3-319-59665-5\\_9},\n  timestamp    = {Wed, 25 Sep 2019 18:04:11 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/dais\/MontesiT17.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/dais\/MontesiT17","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Dan Sebastian Thrane","link":"https:\/\/dblp.uni-trier.de\/pid\/200\/9638"}],"doi":"10.1007\/978-3-319-59665-5_9"},"on-the-interplay-between-fault-handling-and-request-response-service-invocations":{"year":"2008","abstract":"Service Oriented Computing (SOC) allows for the composition of services which communicate using unidirectional notification or bidirectional request-response primitives. Most service orchestration languages proposed so far provide also primitives to handle faults and compensations. The interplay between fault handling and request-response invocations is nontrivial since, for instance, faults should be notified to the requestresponse communication partners in order to compensate also the remote activities. Our work is motivated by the difficulties encountered in programming, using current orchestration languages, some fault handling strategies. We propose as a solution an orchestration programming style in which fault and compensation handlers are dynamically installed. We show the adequacy of our proposal defining its semantics, and proving that it satisfies some expected high-level properties. Finally, we also show how to apply dynamic handler installation in a nontrivial automotive scenario.","collection":{"title":"2008"},"type":"inproceedings","title":"On the interplay between fault handling and request-response service invocations","path":"on-the-interplay-between-fault-handling-and-request-response-service-invocations","pdf":"glmz08","where":"In proceedings of ACSD 2008, pp. 190-198","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1109\/ACSD.2008.4574611"},"id":115,"bibtex":"@inproceedings{DBLP:conf\/acsd\/GuidiLMZ08,\n  author       = {Claudio Guidi and\n                  Ivan Lanese and\n                  Fabrizio Montesi and\n                  Gianluigi Zavattaro},\n  editor       = {Jonathan Billington and\n                  Zhenhua Duan and\n                  Maciej Koutny},\n  title        = {On the interplay between fault handling and request-response service\n                  invocations},\n  booktitle    = {8th International Conference on Application of Concurrency to System\n                  Design {(ACSD} 2008), Xi'an, China, June 23-27, 2008},\n  pages        = {190--198},\n  publisher    = {{IEEE}},\n  year         = {2008},\n  url          = {https:\/\/doi.org\/10.1109\/ACSD.2008.4574611},\n  doi          = {10.1109\/ACSD.2008.4574611},\n  timestamp    = {Wed, 16 Oct 2019 14:14:54 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/acsd\/GuidiLMZ08.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/acsd\/GuidiLMZ08","authors":[{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Ivan Lanese","link":"https:\/\/dblp.uni-trier.de\/pid\/56\/3713"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Gianluigi Zavattaro","link":"https:\/\/dblp.uni-trier.de\/pid\/32\/1979"}],"doi":"10.1109\/ACSD.2008.4574611"},"kickstarting-choreographic-programming-arxiv":{"peerReviewedVersion":"conf\/wsfm\/Montesi15","year":"2015","abstract":"We present an overview of some recent efforts aimed at the development of\nChoreographic Programming, a programming paradigm for the production of\nconcurrent software that is guaranteed to be correct by construction from\nglobal descriptions of communication behaviour.","collection":{"title":"2015"},"type":"article","title":"Kickstarting Choreographic Programming","path":"kickstarting-choreographic-programming-arxiv","pdf":"m15","where":"In CoRR abs\/1502.02519","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1502.02519"},"id":92,"bibtex":"@article{DBLP:journals\/corr\/Montesi15,\n  author       = {Fabrizio Montesi},\n  title        = {Kickstarting Choreographic Programming},\n  journal      = {CoRR},\n  volume       = {abs\/1502.02519},\n  year         = {2015},\n  url          = {http:\/\/arxiv.org\/abs\/1502.02519},\n  eprinttype    = {arXiv},\n  eprint       = {1502.02519},\n  timestamp    = {Mon, 13 Aug 2018 16:48:39 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/Montesi15.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/Montesi15","authors":{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}},"modular-compilation-for-higher-order-functional-choreographies":{"year":"2023","abstract":"<p>Choreographic programming is a paradigm for concurrent and distributed software, whereby descriptions of the intended communications (choreographies) are automatically compiled into distributed code with strong safety and liveness properties (e.g., deadlock-freedom).<\/p><p>Recent efforts tried to combine the theories of choreographic programming and higher-order functional programming, in order to integrate the benefits of the former with the modularity of the latter. However, they do not offer a satisfactory theory of compilation compared to the literature, because of important syntactic and semantic shortcomings: compilation is not modular (editing a part might require recompiling everything) and the generated code can perform unexpected global synchronisations.<\/p><p>In this paper, we find that these shortcomings are not mere coincidences. Rather, they stem from genuine new challenges posed by the integration of choreographies and functions: knowing which participants are involved in a choreography becomes nontrivial, and divergence in applications requires rethinking how to prove the semantic correctness of compilation.<\/p><p>We present a novel theory of compilation for functional choreographies that overcomes these challenges, based on types and a careful design of the semantics of choreographies and distributed code. The result: a modular notion of compilation, which produces code that is deadlock-free and correct (it operationally corresponds to its source choreography).<\/p>","collection":{"title":"2023"},"type":"inproceedings","title":"Modular Compilation for Higher-Order Functional Choreographies","path":"modular-compilation-for-higher-order-functional-choreographies","pdf":"cglmp23","where":"In proceedings of ECOOP 2023, pp. 7:1-7:37","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.4230\/LIPIcs.ECOOP.2023.7"},"id":8,"bibtex":"@inproceedings{DBLP:conf\/ecoop\/Cruz-FilipeGLMP23,\n  author       = {Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Eva Graversen and\n                  Lovro Lugovic and\n                  Fabrizio Montesi and\n                  Marco Peressotti},\n  editor       = {Karim Ali and\n                  Guido Salvaneschi},\n  title        = {Modular Compilation for Higher-Order Functional Choreographies},\n  booktitle    = {37th European Conference on Object-Oriented Programming, {ECOOP} 2023,\n                  July 17-21, 2023, Seattle, Washington, United States},\n  series       = {LIPIcs},\n  volume       = {263},\n  pages        = {7:1--7:37},\n  publisher    = {Schloss Dagstuhl - Leibniz-Zentrum f{\\\"{u}}r Informatik},\n  year         = {2023},\n  url          = {https:\/\/doi.org\/10.4230\/LIPIcs.ECOOP.2023.7},\n  doi          = {10.4230\/LIPIcs.ECOOP.2023.7},\n  timestamp    = {Sat, 30 Sep 2023 09:39:31 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/ecoop\/Cruz-FilipeGLMP23.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/ecoop\/Cruz-FilipeGLMP23","authors":[{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Eva Graversen","link":"https:\/\/dblp.uni-trier.de\/pid\/199\/2114"},{"last":false,"name":"Lovro Lugovic","link":"https:\/\/dblp.uni-trier.de\/pid\/305\/8036"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Peressotti","link":"https:\/\/dblp.uni-trier.de\/pid\/136\/6159"}],"doi":"10.4230\/LIPIcs.ECOOP.2023.7"},"service-integration-via-target-transparent-mediation":{"year":"2012","abstract":"In the context of Service-Oriented Architectures (SOAs), the integration of services is an important aspect that is usually addressed by using specific tools, such as Enterprise Service Bus (ESB). In this paper we propose a frameworkto perform service integration building on the extension of service interfaces, capturing a class of service integrators that are decoupled from the services they integrate in an SOA. We show how our service integrators can be used in practice by evaluating our approach with Jolie, a serviceoriented programming language. Finally, we present how our methodology differs from the standard practice with ESB.","collection":{"title":"2012"},"type":"inproceedings","title":"Service integration via target-transparent mediation","path":"service-integration-via-target-transparent-mediation","pdf":"dggmm12","where":"In proceedings of SOCA 2012, pp. 1-5","links":{"last":true,"name":"wikidata.org","href":"https:\/\/www.wikidata.org\/entity\/Q62043701"},"id":106,"bibtex":"@inproceedings{DBLP:conf\/soca\/PredaGGMM12,\n  author       = {Mila Dalla Preda and\n                  Maurizio Gabbrielli and\n                  Claudio Guidi and\n                  Jacopo Mauro and\n                  Fabrizio Montesi},\n  title        = {Service integration via target-transparent mediation},\n  booktitle    = {2012 Fifth {IEEE} International Conference on Service-Oriented Computing\n                  and Applications (SOCA), Taipei, Taiwan, December 17-19, 2012},\n  pages        = {1--5},\n  publisher    = {{IEEE} Computer Society},\n  year         = {2012},\n  url          = {https:\/\/doi.org\/10.1109\/SOCA.2012.6449432},\n  doi          = {10.1109\/SOCA.2012.6449432},\n  timestamp    = {Fri, 24 Mar 2023 00:02:12 +0100},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/soca\/PredaGGMM12.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/soca\/PredaGGMM12","authors":[{"last":false,"name":"Mila Dalla Preda","link":"https:\/\/dblp.uni-trier.de\/pid\/72\/6805"},{"last":false,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"},{"last":false,"name":"Claudio Guidi","link":"https:\/\/dblp.uni-trier.de\/pid\/33\/2790"},{"last":false,"name":"Jacopo Mauro","link":"https:\/\/dblp.uni-trier.de\/pid\/53\/1605"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]},"applied-choreographies":{"year":"2018","abstract":"<p>Choreographic Programming is a paradigm for distributed programming, where high-level \u201CAlice and Bob\u201D descriptions of communications (choreographies) are used to synthesise correct-by-construction programs. However, implementations of choreographic models use message routing technologies distant from their related theoretical models (e.g., CCS\/π channels). This drives implementers to mediate discrepancies with the theory through undocumented, unproven adaptations, weakening the reliability of their implementations.<\/p><p>As a solution, we propose the framework of Applied Choreographies (AC). In AC, programmers write choreographies in a language that follows the standard syntax and semantics of previous works. Then, choreographies are compiled to a real-world execution model for Service-Oriented Computing (SOC). To manage the complexity of this task, our compilation happens in three steps, respectively dealing with: implementing name-based communications using the concrete mechanism found in SOC, projecting a choreography to a set of processes, and translating processes to a distributed implementation in terms of services.<\/p>","collection":{"title":"2018"},"type":"inproceedings","title":"Applied Choreographies","path":"applied-choreographies","pdf":"gmg18","where":"In proceedings of FORTE 2018, pp. 21-40","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-319-92612-4_2"},"id":50,"bibtex":"@inproceedings{DBLP:conf\/forte\/GiallorenzoMG18,\n  author       = {Saverio Giallorenzo and\n                  Fabrizio Montesi and\n                  Maurizio Gabbrielli},\n  editor       = {Christel Baier and\n                  Lu{\\'{\\i}}s Caires},\n  title        = {Applied Choreographies},\n  booktitle    = {Formal Techniques for Distributed Objects, Components, and Systems\n                  - 38th {IFIP} {WG} 6.1 International Conference, {FORTE} 2018, Held\n                  as Part of the 13th International Federated Conference on Distributed\n                  Computing Techniques, DisCoTec 2018, Madrid, Spain, June 18-21, 2018,\n                  Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {10854},\n  pages        = {21--40},\n  publisher    = {Springer},\n  year         = {2018},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-319-92612-4\\_2},\n  doi          = {10.1007\/978-3-319-92612-4\\_2},\n  timestamp    = {Sat, 09 Apr 2022 12:37:51 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/forte\/GiallorenzoMG18.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/forte\/GiallorenzoMG18","authors":[{"last":false,"name":"Saverio Giallorenzo","link":"https:\/\/dblp.uni-trier.de\/pid\/146\/2078"},{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Maurizio Gabbrielli","link":"https:\/\/dblp.uni-trier.de\/pid\/g\/MGabbrielli"}],"doi":"10.1007\/978-3-319-92612-4_2"},"programming-services-with-correlation-sets":{"year":"2011","abstract":"Correlation sets define a powerful mechanism for routing incoming communications to the correct running session within a server, by inspecting the content of the received messages. We present a language for programming services based on correlation sets taking into account key aspects of service-oriented systems, such as distribution, loose coupling, open-endedness and integration. Distinguishing features of our approach are the notion of correlation aliases and an asynchronous communication model. Our language is equipped with formal syntax, semantics, and a typing system for ensuring desirable properties of programs with respect to correlation sets. We provide an implementation as an extension of the JOLIE language and apply it to a nontrivial real-world example of a fully-functional distributed user authentication system.","collection":{"title":"2011"},"type":"inproceedings","title":"Programming Services with Correlation Sets","path":"programming-services-with-correlation-sets","pdf":"mc11","where":"In proceedings of ICSOC 2011, pp. 125-141","links":{"last":true,"name":"doi.org","href":"https:\/\/doi.org\/10.1007\/978-3-642-25535-9_9"},"id":109,"bibtex":"@inproceedings{DBLP:conf\/icsoc\/MontesiC11,\n  author       = {Fabrizio Montesi and\n                  Marco Carbone},\n  editor       = {Gerti Kappel and\n                  Zakaria Maamar and\n                  Hamid R. Motahari Nezhad},\n  title        = {Programming Services with Correlation Sets},\n  booktitle    = {Service-Oriented Computing - 9th International Conference, {ICSOC}\n                  2011, Paphos, Cyprus, December 5-8, 2011 Proceedings},\n  series       = {Lecture Notes in Computer Science},\n  volume       = {7084},\n  pages        = {125--141},\n  publisher    = {Springer},\n  year         = {2011},\n  url          = {https:\/\/doi.org\/10.1007\/978-3-642-25535-9\\_9},\n  doi          = {10.1007\/978-3-642-25535-9\\_9},\n  timestamp    = {Tue, 14 May 2019 10:00:36 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/conf\/icsoc\/MontesiC11.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"conf\/icsoc\/MontesiC11","authors":[{"last":false,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"},{"last":true,"name":"Marco Carbone","link":"https:\/\/dblp.uni-trier.de\/pid\/41\/1366"}],"doi":"10.1007\/978-3-642-25535-9_9"},"connectors-meet-choreographies-arxiv":{"year":"2018","abstract":"We present Cho-Reo-graphies (CR), a new language model that unites two\npowerful programming paradigms for concurrent software based on communicating\nprocesses: Choreographic Programming and Exogenous Coordination. In CR,\nprogrammers specify the desired communications among processes using a\nchoreography, and define how communications should be concretely animated by\nconnectors given as constraint automata (e.g., synchronous barriers and\nasynchronous multi-casts). CR is the first choreography calculus where\ndifferent communication semantics (determined by connectors) can be freely\nmixed; since connectors are user-defined, CR also supports many communication\nsemantics that were previously unavailable for choreographies. We develop a\nstatic analysis that guarantees that a choreography in CR and its user-defined\nconnectors are compatible, define a compiler from choreographies to a process\ncalculus based on connectors, and prove that compatibility guarantees\ndeadlock-freedom of the compiled process implementations.","collection":{"title":"2018"},"title":"Connectors meet Choreographies","type":"article","path":"connectors-meet-choreographies-arxiv","where":"In CoRR abs\/1804.08976","links":{"last":true,"name":"arxiv.org","href":"http:\/\/arxiv.org\/abs\/1804.08976"},"id":58,"bibtex":"@article{DBLP:journals\/corr\/abs-1804-08976,\n  author       = {Farhad Arbab and\n                  Lu{\\'{\\i}}s Cruz{-}Filipe and\n                  Sung{-}Shik Jongmans and\n                  Fabrizio Montesi},\n  title        = {Connectors meet Choreographies},\n  journal      = {CoRR},\n  volume       = {abs\/1804.08976},\n  year         = {2018},\n  url          = {http:\/\/arxiv.org\/abs\/1804.08976},\n  eprinttype    = {arXiv},\n  eprint       = {1804.08976},\n  timestamp    = {Mon, 24 Sep 2018 12:27:36 +0200},\n  biburl       = {https:\/\/dblp.org\/rec\/journals\/corr\/abs-1804-08976.bib},\n  bibsource    = {dblp computer science bibliography, https:\/\/dblp.org}\n}\n\n","key":"journals\/corr\/abs-1804-08976","authors":[{"last":false,"name":"Farhad Arbab","link":"https:\/\/dblp.uni-trier.de\/pid\/25\/3518"},{"last":false,"name":"Luís Cruz-Filipe","link":"https:\/\/dblp.uni-trier.de\/pid\/21\/4578"},{"last":false,"name":"Sung-Shik Jongmans","link":"https:\/\/dblp.uni-trier.de\/pid\/91\/8340"},{"last":true,"name":"Fabrizio Montesi","link":"https:\/\/dblp.uni-trier.de\/pid\/65\/3603"}]}}